{"version":3,"sources":["Components/PlayerNumber.js","Components/HoleNumber.js","Components/EnterNames.js","Components/SingleHoleInfoTopComponent.js","Components/SingleHoleInfoPlayerComponent.js","Components/SingleHoleInfo.js","Components/PlayGameState.js","App.js","serviceWorker.js","index.js"],"names":["PlayerNumber","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputNumber","num","setState","console","log","props","numberOfPlayers","goingToNumberOfHoles","react_default","a","createElement","className","onClick","handleDefaultPlayers","bind","Component","HoleNumber","numberOfHoles","goingToEnterNameState","handleDefaultHoles","id","EnterNames","listOfPlayers","e","ref","refs","push","value","setListOfPlayers","goingToPlayGameState","preventDefault","temp","parseInt","theFields","tempArray","Array","i","map","x","refString","type","maxLength","onSubmit","handleSubmit","SingleHoleInfoTopComponent","direction","handleUpdateHoleNumber","handleUpdateParNumber","currentHole","par","SingleHoleInfoPlayerComponent","name","isGoingDown","updatePlayerData","updatePlayerDataForHole","forceUpdate","toRender","listOfPlayersData","player","score","handleUpdatePlayers","holeData","SingleHoleInfo","topComponent","Components_SingleHoleInfoTopComponent","holeNumber","updateHoleNumber","updateParNumber","playerComponent","Components_SingleHoleInfoPlayerComponent","PlayGameState","holesData","holeToDisplay","players","playersData","initialRender","currentHoleToDisplay","currentHoleParNumber","u","currentScore","singlePlayer","currentScoreForThatHole","_this2","setPlayerData","setHoleData","arrayOfSingleHoleInfoComponents","Components_SingleHoleInfo","handleUpdateWhichHoleToShow","App","currentComponent","playerNumber","holes","number","mylist","Components_PlayerNumber","handleUpdatePlayerNumber","handleGoToHoleNumber","Components_HoleNumber","handleGoToEnterNameState","Components_EnterNames","handleSetListOfPlayers","handleGoToPlayGameState","Components_PlayGameState","alert","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37e54c82.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n/*\r\n    @ToDo:\r\n    <DONE> Make default button options cus typing a number is shit painful\r\n    <>\r\n    <>\r\n    <>\r\n    <>\r\n*/\r\n\r\n// Stylesheets\r\nimport './STYLE_EnterPlayerNumber.css';\r\n\r\nclass PlayerNumber extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state={\r\n            inputNumber: ''\r\n        }\r\n    }\r\n\r\n    /* // deprecated function no longer in use\r\n    handleSubmit(e){\r\n        if(this.refs.number.value === ''){\r\n            alert('Please enter a value');\r\n        }\r\n        else{\r\n            this.setState({\r\n                inputNumber: this.refs.number.value\r\n            }, function(){\r\n                console.log(this.state);\r\n                this.props.numberOfPlayers(this.state.inputNumber);\r\n                this.props.goingToNumberOfHoles();\r\n            });\r\n        }\r\n\r\n        e.preventDefault();\r\n    }\r\n    */\r\n\r\n    handleDefaultPlayers(num){\r\n        this.setState({\r\n            inputNumber: num\r\n        }, function(){\r\n            console.log(this.state);\r\n            this.props.numberOfPlayers(this.state.inputNumber);\r\n            this.props.goingToNumberOfHoles();\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form>\r\n                    Select Number of Players:\r\n                    <ul className=\"listPlayerNumber\">\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 1)} className=\"playerNumberButton\"> 1 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 2)} className=\"playerNumberButton\"> 2 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 3)} className=\"playerNumberButton\"> 3 </button>\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <ul className=\"listPlayerNumber\">\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 4)} className=\"playerNumberButton\"> 4 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 5)} className=\"playerNumberButton\"> 5 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 6)} className=\"playerNumberButton\"> 6 </button>\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <ul className=\"listPlayerNumber\">\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 7)} className=\"playerNumberButton\"> 7 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 8)} className=\"playerNumberButton\"> 8 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 9)} className=\"playerNumberButton\"> 9 </button>\r\n                        </li>\r\n                    </ul>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerNumber;","import React, { Component } from 'react';\r\n\r\n/*\r\n    @To-Do:\r\n\r\n    <DONE> Have default 9 hole or 18 hole option\r\n    <>\r\n    <>\r\n    <>\r\n*/\r\n\r\n\r\n// Stylesheets\r\nimport './STYLE_EnterHoleNumber.css';\r\n\r\nclass HoleNumber extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state={\r\n            inputNumber: ''\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deprecated Method\r\n     */\r\n\r\n    /*\r\n    handleSubmit(e){\r\n        if(this.refs.number.value === ''){\r\n            alert('Please enter a value');\r\n        }\r\n        else{\r\n            this.setState({\r\n                inputNumber: this.refs.number.value\r\n            }, function(){\r\n                console.log(this.state);\r\n                this.props.numberOfHoles(this.state.inputNumber);\r\n                this.props.goingToEnterNameState();\r\n            });\r\n        }\r\n\r\n        e.preventDefault();\r\n    }\r\n    */\r\n\r\n    handleDefaultHoles(num){\r\n        //alert(num);\r\n        this.setState({\r\n            inputNumber: num\r\n        }, function(){\r\n            console.log(this.state);\r\n            this.props.numberOfHoles(num);\r\n            this.props.goingToEnterNameState();\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                Select Number of Holes:\r\n                 <form> \r\n                     <ul className=\"listHoleNumber\">\r\n                         <li>\r\n                            <button onClick={this.handleDefaultHoles.bind(this, '9')} className=\"holeNumberButton\" id=\"nineHoles\"> 9 Holes </button>\r\n                         </li>\r\n                         <li>\r\n                            <button onClick={this.handleDefaultHoles.bind(this, '18')} className=\"holeNumberButton\" id=\"eighteenHoles\"> 18 Holes </button>\r\n                         </li>\r\n                     </ul>\r\n                 </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HoleNumber;","import React, { Component } from 'react';\r\n\r\n// Stylesheets\r\nimport './STYLE_EnterNames.css';\r\n\r\nclass EnterNames extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            listOfPlayers: [],\r\n            numberOfPlayers:''\r\n        }\r\n    }\r\n    \r\n    handleSubmit(e){\r\n        for(var ref in this.refs){\r\n            this.state.listOfPlayers.push(this.refs[ref].value);\r\n        }\r\n        \r\n        this.props.setListOfPlayers(this.state.listOfPlayers);\r\n        this.props.goingToPlayGameState();\r\n\r\n        e.preventDefault();\r\n    }\r\n\r\n    render(){\r\n\r\n        // Converting temp to integer\r\n        let temp;\r\n        this.state.numberOfPlayers = this.props.numberOfPlayers;\r\n        temp = parseInt(this.state.numberOfPlayers, 10);\r\n\r\n        // Initializing Array for destroying null array\r\n        let tempArray = new Array(temp + 1);\r\n        for(var i = 0; i < temp; i++){\r\n            tempArray.push(i);\r\n        }\r\n\r\n        // Creating list of input fields for players Names, ref references for each input field is player1 player2 ... etc\r\n        let theFields;\r\n        theFields = tempArray.map(x => {\r\n            let refString = 'playerNo' + (x+1);\r\n            return(\r\n                <div>\r\n                    Player  {x + 1} &nbsp; &nbsp;\r\n                    <input type=\"text\" ref={refString} maxLength=\"6\" className=\"inputField\"/>\r\n                    <br/><br/>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        // Render Component\r\n        return(\r\n            <div>\r\n                <p>Enter your names:</p>\r\n                <form onSubmit={this.handleSubmit.bind(this)}>\r\n                    {theFields}\r\n                    <br/>\r\n                    <input id=\"submitButton\" type=\"submit\" value=\"Submit\" className=\"submitButton\"/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnterNames;","import React, { Component } from 'react';\r\n\r\n// Stylesheets\r\nimport './STYLE_SingleHoleInfoTopComponent.css';\r\n\r\nclass SingleHoleInfoTopComponent extends Component{\r\n\r\n    handleUpdateHoleNumber(direction){\r\n        this.props.handleUpdateHoleNumber(direction);\r\n    }\r\n\r\n    handleUpdateParNumber(direction){\r\n        this.props.handleUpdateParNumber(direction);\r\n    }\r\n\r\n    render(){\r\n\r\n        let currentHole = this.props.currentHole + 1;\r\n        let par = this.props.par;\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h1>\r\n                        <button onClick={this.handleUpdateHoleNumber.bind(this, 'prev')} className=\"HoleArrowButton\"> ⯇ </button>\r\n                        &nbsp; Hole {currentHole} &nbsp;\r\n                        <button onClick={this.handleUpdateHoleNumber.bind(this, 'next')} className=\"HoleArrowButton\"> ⯈ </button> \r\n                    </h1>\r\n                </div>\r\n                \r\n                <div className=\"parData\">\r\n                        PAR &nbsp; &nbsp;\r\n                        <button onClick={this.handleUpdateParNumber.bind(this, 'minus')} className=\"ParArrowButtonMINUS\"> - </button>\r\n                        &nbsp; <span className=\"parNumber\"> {par} </span> &nbsp;\r\n                        <button onClick={this.handleUpdateParNumber.bind(this, 'add')} className=\"ParArrowButtonPLUS\"> + </button> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleHoleInfoTopComponent;","import React, { Component } from 'react';\r\n\r\n// Stylesheets\r\nimport './STYLE_SingleHoleInfoBottomComponent.css';\r\n\r\nclass SingleHoleInfoPlayerComponent extends Component{\r\n\r\n    handleUpdatePlayers(name, isGoingDown){\r\n        console.log(\"Handling Update Players in SingleHoleInfoPlayerComponent\");\r\n        this.props.updatePlayerData(name, isGoingDown);\r\n        this.props.updatePlayerDataForHole(name, isGoingDown);\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render(){\r\n        \r\n        let toRender = this.props.listOfPlayersData.map(player => {\r\n            return(\r\n                <tr>\r\n                    <td>\r\n                        <span className=\"playerNameText\">{player.name}</span>\r\n                    </td>\r\n\r\n                    <td>\r\n                        <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    Total\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <span className=\"currentHoleScore\"> {player.score}</span>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                        </table>\r\n                    </td>\r\n\r\n                    <td>\r\n                        <table>\r\n                            <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    Current\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={this.handleUpdatePlayers.bind(this, player.name, true)} className=\"playerScoreButtonMINUS\"> - </button>\r\n                                    &nbsp; <span className=\"currentHoleScore\">{player.holeData[this.props.currentHole]}</span> &nbsp;\r\n                                    <button onClick={this.handleUpdatePlayers.bind(this, player.name, false)} className=\"playerScoreButtonPLUS\"> + </button> \r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <table className=\"playerTable\">\r\n                <tbody>\r\n                    {toRender}\r\n                </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleHoleInfoPlayerComponent;","import React, { Component } from 'react';\r\n\r\n// Components\r\nimport SingleHoleInfoTopComponent from './SingleHoleInfoTopComponent';\r\nimport SingleHoleInfoPlayerComponent from './SingleHoleInfoPlayerComponent'\r\n\r\nclass SingleHoleInfo extends Component{\r\n\r\n    render(){\r\n\r\n        let topComponent = <SingleHoleInfoTopComponent \r\n        currentHole={this.props.holeNumber}\r\n        handleUpdateHoleNumber={this.props.updateHoleNumber.bind(this)}\r\n        handleUpdateParNumber={this.props.updateParNumber.bind(this)}\r\n        par={this.props.par}\r\n        />;\r\n\r\n        let playerComponent = <SingleHoleInfoPlayerComponent \r\n        listOfPlayersData={this.props.listOfPlayersData}\r\n        updatePlayerData={this.props.updatePlayerData}\r\n        updatePlayerDataForHole={this.props.updatePlayerDataForHole}\r\n        currentHole={this.props.holeNumber}\r\n        />\r\n\r\n        return (\r\n            <div>\r\n                {topComponent}\r\n                <br/><br/>\r\n                {playerComponent}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleHoleInfo;","import React, {Component} from 'react';\r\n\r\n// Components\r\nimport SingleHoleInfo from './SingleHoleInfo';\r\n\r\nclass PlayGameState extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            numberOfHoles: '',\r\n            holesData: [],\r\n            holeToDisplay: 0,\r\n\r\n            players: [],\r\n            playersData: [],\r\n            initialRender: true\r\n        }\r\n    }\r\n\r\n    handleUpdateParNumber(direction){\r\n        let currentHoleToDisplay = this.state.holeToDisplay;\r\n        let currentHoleParNumber = this.state.holesData[currentHoleToDisplay].par;\r\n\r\n        //console.log(\"DEBUG: CurrentHoleToDisplay: \" + (currentHoleToDisplay + 1));\r\n        //console.log(\"DEBUG: CurrentHoleParNumber: \" + currentHoleParNumber);\r\n\r\n        for(var i in this.state.holesData){ \r\n            if(this.state.holesData[i].holeNumber === currentHoleToDisplay){\r\n                if(direction === 'minus'){\r\n                    if(currentHoleParNumber > 0){\r\n                        this.state.holesData[i].par = currentHoleParNumber - 1;\r\n                    }\r\n                    else{\r\n                        // Disable '-' Button\r\n                    }\r\n                }\r\n                else if(direction === 'add'){\r\n                    this.state.holesData[i].par = currentHoleParNumber + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        //console.log(\"Current Hole to Display: \" + (this.state.holeToDisplay + 1));\r\n        //console.log(\"Got told to display: \" + (this.state.holesData[currentHoleToDisplay].holeNumber + 1));\r\n        //console.log(\"Updated Par: \" + this.state.holesData[currentHoleToDisplay].par);\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    handleUpdateWhichHoleToShow(direction){\r\n        let currentHoleToDisplay = this.state.holeToDisplay;\r\n        if(direction === 'prev'){\r\n            if(this.state.holeToDisplay > 0){\r\n                this.state.holeToDisplay = currentHoleToDisplay - 1;\r\n            }\r\n            else{\r\n                // Disable '-' button\r\n            }\r\n        }\r\n        else if(direction === 'next'){\r\n            if(this.state.holeToDisplay < parseInt(this.state.numberOfHoles - 1)){\r\n                this.state.holeToDisplay = currentHoleToDisplay + 1;\r\n            }\r\n            else{\r\n                // Disable '+' button\r\n            }\r\n        }\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    setHoleData(){\r\n        for(var i = 0; i < parseInt(this.state.numberOfHoles); i++){\r\n            this.state.holesData.push({\r\n                holeNumber: i,\r\n                par: 3,\r\n            });\r\n        }\r\n    }\r\n\r\n    setPlayerData(){\r\n        for(var player in this.state.players){\r\n            this.state.playersData.push({\r\n                name: this.state.players[player],\r\n                score: 0,\r\n                holeData: []\r\n            });\r\n        }\r\n\r\n        for(var u in this.state.players){\r\n            for(var i = 0; i < this.state.numberOfHoles; i++){\r\n                this.state.playersData[u].holeData.push(0);\r\n            }\r\n\r\n            //console.log(\"Player Hole Data | Name: \" + this.state.playersData[u].name + \" HoleData: \" + this.state.playersData[u].holeData);\r\n        }\r\n    }\r\n\r\n    updatePlayerData(player, isGoingDown){\r\n        for(var i in this.state.playersData){\r\n            let singlePlayer = this.state.playersData[i];\r\n            if(singlePlayer.name === player){\r\n                let currentScore = this.state.playersData[i].score\r\n                if(isGoingDown){\r\n                    this.state.playersData[i].score = currentScore - 1;\r\n                }\r\n                else{\r\n                    this.state.playersData[i].score = currentScore + 1;\r\n                } \r\n            }\r\n        }\r\n    }\r\n\r\n    updatePlayerDataForHole(player, isGoingDown){\r\n        for(var i in this.state.playersData){ // finding right player\r\n            let singlePlayer = this.state.playersData[i]\r\n            let currentHole = this.state.holeToDisplay;\r\n\r\n            if(singlePlayer.name === player){// if we found correct player\r\n                let currentScoreForThatHole = singlePlayer.holeData[currentHole];\r\n\r\n                if(isGoingDown){\r\n                    this.state.playersData[i].holeData[currentHole] = currentScoreForThatHole - 1;\r\n                }\r\n                else{\r\n                    this.state.playersData[i].holeData[currentHole] = currentScoreForThatHole + 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        if(this.state.initialRender){\r\n            this.state.numberOfHoles = this.props.numberOfHoles;\r\n            this.state.players = this.props.players;\r\n            this.setPlayerData();\r\n            this.setHoleData();\r\n\r\n            this.state.initialRender = false;\r\n        }\r\n\r\n        let toRender;\r\n\r\n        let arrayOfSingleHoleInfoComponents = this.state.holesData.map( currentHole => {\r\n            return (\r\n                <div>\r\n                    <SingleHoleInfo\r\n                    holeNumber={currentHole.holeNumber}\r\n                    listOfPlayersData={this.state.playersData}\r\n                    updatePlayerData={this.updatePlayerData.bind(this)}\r\n                    updatePlayerDataForHole={this.updatePlayerDataForHole.bind(this)}\r\n                    updateHoleNumber={this.handleUpdateWhichHoleToShow.bind(this)} \r\n                    updateParNumber={this.handleUpdateParNumber.bind(this)}\r\n                    par={currentHole.par}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n\r\n        /*\r\n        // rendering just one sample of singleHoleInfo whilst implementing design of singleHoleInfo\r\n        // @To-Do: need to implement switch-case where which singleHoleInfo to show\r\n        let toRender = <SingleHoleInfo\r\n        listOfPlayersData={this.state.playersData}\r\n        updatePlayerData={this.updatePlayerData.bind(this)}\r\n\r\n        />\r\n        */\r\n\r\n        // Which Hole to show\r\n        for(var i in arrayOfSingleHoleInfoComponents){\r\n            if(parseInt(i) === this.state.holeToDisplay){\r\n                toRender = arrayOfSingleHoleInfoComponents[i];\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                {toRender} \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayGameState;","import React, { Component } from 'react';\n\n// Components\nimport PlayerNumber from './Components/PlayerNumber';\nimport HoleNumber from './Components/HoleNumber';\nimport EnterNames from './Components/EnterNames';\nimport PlayGameState from './Components/PlayGameState';\n\n// Stylesheets\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      currentComponent: 'playerNumberState',\n      playerNumber: ' ', // if '' empty string, then props assignment doesn't seem to work\n      holes: ' ',\n      players: []\n    }\n  }\n\n  /* Getting Number of Players */\n  handleUpdatePlayerNumber(number){\n    this.state.playerNumber = number;\n    console.log(\"Number of Players: \" + this.state.playerNumber);\n  }\n\n  handleGoToHoleNumber(){\n    this.setState({currentComponent: 'holeNumberState'});\n  }\n\n  /* Getting Number of Holes */\n  handleUpdateHoleNumber(number){\n    this.state.holes = number;\n    console.log(\"Number of Holes: \" + this.state.holes);\n  }\n\n  handleGoToEnterNameState(){\n    this.setState({currentComponent: 'EnterNameState'})\n  }\n\n  handleGoToPlayGameState(){\n    this.setState({currentComponent: 'playGameState'})\n  }\n\n  handleSetListOfPlayers(mylist){\n    this.state.players = mylist;\n    console.log(\"List of Players: \" + this.state.players);\n  }\n\n  render() {\n\n    let toRender;\n\n    if(this.state.currentComponent === 'playerNumberState'){\n      toRender = <PlayerNumber \n        numberOfPlayers={this.handleUpdatePlayerNumber.bind(this)}\n        goingToNumberOfHoles={this.handleGoToHoleNumber.bind(this)}\n        />;\n    }\n    else if(this.state.currentComponent === 'holeNumberState'){\n      toRender = <HoleNumber \n      numberOfHoles={this.handleUpdateHoleNumber.bind(this)}\n      goingToEnterNameState={this.handleGoToEnterNameState.bind(this)}\n      />;\n    }\n    else if(this.state.currentComponent === 'EnterNameState'){\n      toRender = <EnterNames \n      setListOfPlayers={this.handleSetListOfPlayers.bind(this)}\n      numberOfPlayers={this.state.playerNumber}\n      goingToPlayGameState={this.handleGoToPlayGameState.bind(this)}\n      />\n    }\n    else if(this.state.currentComponent === 'playGameState'){\n      //console.log('Rendering Game State');\n      toRender = <PlayGameState\n      numberOfHoles = {this.state.holes}\n      players = {this.state.players}\n      />;\n    }\n    else{\n      alert('Extremely Fatal Error Occured - There was no page to load');\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <link href=\"https://fonts.googleapis.com/css?family=Gruppo\" rel=\"stylesheet\"/>\n          {toRender}\n        </header>\n        <br/> <br/>\n        <footer> Created By Paul Yoon (kodawarii/ayamachi, SK_DUDevelopment 2019©) </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
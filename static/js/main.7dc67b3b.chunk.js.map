{"version":3,"sources":["Components/PlayerNumber.js","Components/HoleNumber.js","Components/EnterNames.js","Components/SingleHoleInfoTopComponent.js","Components/SingleHoleInfoPlayerComponent.js","Components/SingleHoleInfo.js","Components/PlayGameState.js","App.js","serviceWorker.js","index.js"],"names":["PlayerNumber","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputNumber","e","refs","number","value","alert","setState","console","log","props","numberOfPlayers","goingToNumberOfHoles","preventDefault","react_default","a","createElement","onSubmit","handleSubmit","bind","type","ref","id","Component","HoleNumber","numberOfHoles","goingToEnterNameState","num","onClick","handleDefaultHoles","EnterNames","listOfPlayers","push","setListOfPlayers","goingToPlayGameState","temp","parseInt","theFields","tempArray","Array","i","map","x","refString","SingleHoleInfoTopComponent","par","currentHole","SingleHoleInfoPlayerComponent","name","isGoingDown","updatePlayerData","forceUpdate","tableContent","listOfPlayersData","player","score","handleUpdatePlayers","SingleHoleInfo","holeData","topComponent","Components_SingleHoleInfoTopComponent","playerComponent","Components_SingleHoleInfoPlayerComponent","PlayGameState","players","playersData","currentScore","playerData","setPlayerData","toRender","Components_SingleHoleInfo","App","currentComponent","playerNumber","holes","mylist","Components_PlayerNumber","handleUpdatePlayerNumber","handleGoToHoleNumber","Components_HoleNumber","handleUpdateHoleNumber","handleGoToEnterNameState","Components_EnterNames","handleSetListOfPlayers","handleGoToPlayGameState","Components_PlayGameState","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7dc67b3b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n/*\r\n    @ToDo:\r\n    <> Make default button options cus typing a number is shit painful\r\n    <>\r\n    <>\r\n    <>\r\n    <>\r\n*/\r\n\r\nclass PlayerNumber extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state={\r\n            inputNumber: ''\r\n        }\r\n    }\r\n\r\n    handleSubmit(e){\r\n        if(this.refs.number.value === ''){\r\n            alert('Please enter a value');\r\n        }\r\n        else{\r\n            this.setState({\r\n                inputNumber: this.refs.number.value\r\n            }, function(){\r\n                console.log(this.state);\r\n                this.props.numberOfPlayers(this.state.inputNumber);\r\n                this.props.goingToNumberOfHoles();\r\n            });\r\n        }\r\n\r\n        e.preventDefault();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit = {this.handleSubmit.bind(this)}>\r\n                    <p>Enter Number of Players</p> \r\n                    <input type=\"text\" ref=\"number\"/>\r\n                    <input id=\"submitButton\" type=\"submit\" value=\"Submit\" />\r\n                 </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerNumber;","import React, { Component } from 'react';\r\n\r\n/*\r\n    @To-Do:\r\n\r\n    <DONE> Have default 9 hole or 18 hole option\r\n    <>\r\n    <>\r\n    <>\r\n*/\r\n\r\nclass HoleNumber extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state={\r\n            inputNumber: ''\r\n        }\r\n    }\r\n\r\n    handleSubmit(e){\r\n        if(this.refs.number.value === ''){\r\n            alert('Please enter a value');\r\n        }\r\n        else{\r\n            this.setState({\r\n                inputNumber: this.refs.number.value\r\n            }, function(){\r\n                console.log(this.state);\r\n                this.props.numberOfHoles(this.state.inputNumber);\r\n                this.props.goingToEnterNameState();\r\n            });\r\n        }\r\n\r\n        e.preventDefault();\r\n    }\r\n\r\n    handleDefaultHoles(num){\r\n        //alert(num);\r\n        this.setState({\r\n            inputNumber: num\r\n        }, function(){\r\n            console.log(this.state);\r\n            this.props.numberOfHoles(num);\r\n            this.props.goingToEnterNameState();\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit = {this.handleSubmit.bind(this)}>\r\n                    <p>Enter Number of Holes</p> \r\n                    <input type=\"text\" ref=\"number\"/>\r\n                    <input id=\"submitButton\" type=\"submit\" value=\"Submit\" />\r\n                 </form>\r\n\r\n                 <form> \r\n                     <button onClick={this.handleDefaultHoles.bind(this, '9')}> 9 Holes </button>\r\n                     <button onClick={this.handleDefaultHoles.bind(this, '18')}> 18 Holes </button>\r\n                 </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HoleNumber;","import React, { Component } from 'react';\r\n\r\nclass EnterNames extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            listOfPlayers: [],\r\n            numberOfPlayers:''\r\n        }\r\n    }\r\n    \r\n    handleSubmit(e){\r\n        for(var ref in this.refs){\r\n            this.state.listOfPlayers.push(this.refs[ref].value);\r\n        }\r\n        \r\n        this.props.setListOfPlayers(this.state.listOfPlayers);\r\n        this.props.goingToPlayGameState();\r\n\r\n        e.preventDefault();\r\n    }\r\n\r\n    render(){\r\n\r\n        // Converting temp to integer\r\n        let temp;\r\n        this.state.numberOfPlayers = this.props.numberOfPlayers;\r\n        temp = parseInt(this.state.numberOfPlayers, 10);\r\n\r\n        // Initializing Array for destroying null array\r\n        let tempArray = new Array(temp + 1);\r\n        for(var i = 0; i < temp; i++){\r\n            tempArray.push(i);\r\n        }\r\n\r\n        // Creating list of input fields for players Names, ref references for each input field is player1 player2 ... etc\r\n        let theFields;\r\n        theFields = tempArray.map(x => {\r\n            let refString = 'playerNo' + (x+1);\r\n            return(\r\n                <div>\r\n                    <p> Player {x + 1} </p>\r\n                    <input type=\"text\" ref={refString}/>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        // Render Component\r\n        return(\r\n            <div>\r\n                <p>Enter your names:</p>\r\n                <form onSubmit={this.handleSubmit.bind(this)}>\r\n                    {theFields}\r\n                    <input id=\"submitButton\" type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnterNames;","import React, { Component } from 'react';\r\n\r\nclass SingleHoleInfoTopComponent extends Component{\r\n\r\n    constructor(){\r\n        super()\r\n\r\n        this.state={\r\n            par: '3'\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        let currentHole = this.props.currentHole;\r\n        let par = this.state.par;\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <button> ← </button>\r\n                    Hole {currentHole}\r\n                    <button> → </button> \r\n                </div>\r\n                <div>\r\n                    <button> - </button>\r\n                    Par: {par}\r\n                    <button> + </button> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleHoleInfoTopComponent;","import React, { Component } from 'react';\r\n\r\nclass SingleHoleInfoPlayerComponent extends Component{\r\n\r\n    constructor(){\r\n        super()\r\n    }\r\n\r\n    handleUpdatePlayers(name, isGoingDown){\r\n        console.log(\"Handling Update Players in SingleHoleInfoPlayerComponent\");\r\n        this.props.updatePlayerData(name, isGoingDown);\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render(){\r\n        \r\n        let tableContent = this.props.listOfPlayersData.map(player => {\r\n            return(\r\n                <tr>\r\n                    <td>\r\n                        {player.name}\r\n                    </td>\r\n\r\n                    <td>\r\n                        Total: \r\n                    </td>\r\n\r\n                    <td>\r\n                        {player.score}\r\n                    </td>\r\n\r\n                    <td>\r\n                        Current: \r\n                    </td>\r\n\r\n                    <td>\r\n                        <button onClick={this.handleUpdatePlayers.bind(this, player.name, true)}> - </button>\r\n                        hole.getPlayerScore\r\n                        <button onClick={this.handleUpdatePlayers.bind(this, player.name, false)}> +  </button> \r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <table>\r\n                    {tableContent}\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleHoleInfoPlayerComponent;","import React, { Component } from 'react';\r\n\r\n// Components\r\nimport SingleHoleInfoTopComponent from './SingleHoleInfoTopComponent';\r\nimport SingleHoleInfoPlayerComponent from './SingleHoleInfoPlayerComponent'\r\n\r\nclass SingleHoleInfo extends Component{\r\n\r\n    constructor(){\r\n        super()\r\n\r\n        this.state={\r\n            currentHole: '1',\r\n            holeData: []\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        let topComponent = <SingleHoleInfoTopComponent \r\n        currentHole={this.state.currentHole}\r\n        />;\r\n\r\n        let playerComponent = <SingleHoleInfoPlayerComponent \r\n        listOfPlayersData={this.props.listOfPlayersData}\r\n        updatePlayerData={this.props.updatePlayerData}\r\n        />\r\n\r\n        return (\r\n            <div>\r\n                {topComponent}\r\n                <br/><br/>\r\n                {playerComponent}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleHoleInfo;","import React, {Component} from 'react';\r\n\r\n// Components\r\nimport SingleHoleInfo from './SingleHoleInfo';\r\n\r\nclass PlayGameState extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            numberOfHoles: '',\r\n            players: [],\r\n            playersData: []\r\n        }\r\n    }\r\n\r\n    setPlayerData(){\r\n        for(var player in this.state.players){\r\n            this.state.playersData.push({\r\n                name: this.state.players[player],\r\n                score: 0,\r\n            });\r\n        }\r\n    }\r\n\r\n    updatePlayerData(player, isGoingDown){\r\n        for(var i in this.state.playersData){ // some fucking reason, this is index, NOT the player data\r\n            let singlePlayer = this.state.playersData[i];\r\n            if(singlePlayer.name === player){\r\n                let currentScore = this.state.playersData[i].score\r\n                if(isGoingDown){\r\n                    this.state.playersData[i].score = currentScore - 1;\r\n                }\r\n                else{\r\n                    this.state.playersData[i].score = currentScore + 1;\r\n                } \r\n            }\r\n        }\r\n\r\n        // some debugging to see if score actually gets updated, need to somehow show this update on webpage dynamically\r\n        for(var i in this.state.playersData){\r\n            let playerData = this.state.playersData[i]\r\n            console.log(\"Name: \" + playerData.name + \" Score: \" + playerData.score);\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        this.state.numberOfHoles = this.props.numberOfHoles;\r\n        this.state.players = this.props.players;\r\n        this.setPlayerData();\r\n\r\n        // rendering just one sample of singleHoleInfo whilst implementing design of singleHoleInfo\r\n        // @To-Do: need to implement switch-case where which singleHoleInfo to show\r\n        let toRender = <SingleHoleInfo\r\n        listOfPlayersData={this.state.playersData}\r\n        updatePlayerData={this.updatePlayerData.bind(this)}\r\n\r\n        />\r\n\r\n        return(\r\n            <div>\r\n                {toRender} \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayGameState;","import React, { Component } from 'react';\n\n// Components\nimport PlayerNumber from './Components/PlayerNumber';\nimport HoleNumber from './Components/HoleNumber';\nimport EnterNames from './Components/EnterNames';\nimport PlayGameState from './Components/PlayGameState';\n\n// Stylesheets\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      currentComponent: 'playerNumberState',\n      playerNumber: ' ', // if '' empty string, then props assignment doesn't seem to work\n      holes: ' ',\n      players: []\n    }\n  }\n\n  /* Getting Number of Players */\n  handleUpdatePlayerNumber(number){\n    this.state.playerNumber = number;\n    console.log(\"Number of Players: \" + this.state.playerNumber);\n  }\n\n  handleGoToHoleNumber(){\n    this.setState({currentComponent: 'holeNumberState'});\n  }\n\n  /* Getting Number of Holes */\n  handleUpdateHoleNumber(number){\n    this.state.holes = number;\n    console.log(\"Number of Holes: \" + this.state.holes);\n  }\n\n  handleGoToEnterNameState(){\n    this.setState({currentComponent: 'EnterNameState'})\n  }\n\n  handleGoToPlayGameState(){\n    this.setState({currentComponent: 'gameModeState'})\n  }\n\n  handleSetListOfPlayers(mylist){\n    this.state.players = mylist;\n    console.log(\"List of Players: \" + this.state.players);\n  }\n\n  render() {\n\n    let toRender;\n\n    if(this.state.currentComponent === 'playerNumberState'){\n      toRender = <PlayerNumber \n        numberOfPlayers={this.handleUpdatePlayerNumber.bind(this)}\n        goingToNumberOfHoles={this.handleGoToHoleNumber.bind(this)}\n        />;\n    }\n    else if(this.state.currentComponent === 'holeNumberState'){\n      toRender = <HoleNumber \n      numberOfHoles={this.handleUpdateHoleNumber.bind(this)}\n      goingToEnterNameState={this.handleGoToEnterNameState.bind(this)}\n      />;\n    }\n    else if(this.state.currentComponent === 'EnterNameState'){\n      toRender = <EnterNames \n      setListOfPlayers={this.handleSetListOfPlayers.bind(this)}\n      numberOfPlayers={this.state.playerNumber}\n      goingToPlayGameState={this.handleGoToPlayGameState.bind(this)}\n      />\n    }\n    else if(this.state.currentComponent === 'gameModeState'){\n      //console.log('Rendering Game State');\n      toRender = <PlayGameState\n      numberOfPlayers = {this.state.holes}\n      players = {this.state.players}\n      />;\n    }\n    else{\n      alert('Extremely Fatal Error Occured - no page to load');\n    }\n\n    return (\n      <div className=\"App\">\n        <div>\n          <p>\n            Scoreboard App Thingy\n          </p>\n        </div>\n        <header className=\"App-header\">\n          {toRender}\n        </header>\n      </div>\n     \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Components/PlayerNumber.js","Components/HoleNumber.js","Components/EnterNames.js","Components/SingleHoleInfoTopComponent.js","Components/SingleHoleInfoPlayerComponent.js","Components/SingleHoleInfo.js","Components/PlayGameState.js","Components/ExcessPlayerPage.js","Components/OptionSelectionBanner.js","Components/AreYouSure.js","Components/ResultsPage.js","App.js","serviceWorker.js","index.js"],"names":["PlayerNumber","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputNumber","num","setState","console","log","props","numberOfPlayers","goingToNumberOfHoles","goingToExcessPlayers","react_default","a","createElement","className","onClick","handleDefaultPlayers","bind","handleExcessPlayers","Component","HoleNumber","numberOfHoles","goingToEnterNameState","handleDefaultHoles","id","EnterNames","listOfPlayers","realFields","fields","errors","missingPlayers","formIsValid","fieldIsEmpty","i","match","field","e","target","value","preventDefault","handleValidation","ref","refs","push","setListOfPlayers","goingToPlayGameState","_this2","theFields","tempArray","parseInt","map","x","refString","type","maxLength","onChange","handleChange","onSubmit","handleSubmit","SingleHoleInfoTopComponent","direction","handleUpdateHoleNumber","handleUpdateParNumber","currentHole","par","latestHole","SingleHoleInfoPlayerComponent","name","isGoingDown","updatePlayerData","updatePlayerDataForHole","forceUpdate","toRender","listOfPlayersData","player","parScoreString","parScoreString2","score","holeData","score2","totalOverallScore","u","handleUpdatePlayers","SingleHoleInfo","topComponent","Components_SingleHoleInfoTopComponent","holeNumber","updateHoleNumber","updateParNumber","playerComponent","Components_SingleHoleInfoPlayerComponent","initialState","holesData","holeToDisplay","players","playersData","initialRender","PlayGameState","currentHoleToDisplay","currentHoleParNumber","handleTriggerFinalHole","sendPlayerData","tempTotalScore","rawTotalScore","totalScore","rawHoleData","currentScore","currentRawScore","singlePlayer","currentScoreForThatHole","currentRAWScoreForThatHole","setPlayerData","setHoleData","arrayOfSingleHoleInfoComponents","Components_SingleHoleInfo","handleUpdateWhichHoleToShow","ExcessPlayerPage","OptionSelectionBanner","holes","currentComponent","goingToAreYouSurePage","goingToNumberOfPlayers","AreYouSure","goingToResetGame","ResultsPage","things","data","scores","classColor","getColor","workingArray","topBit","playerNumber","isFinalHole","stack","playerData","App","number","mylist","showBanner","finnishAndResults","Components_PlayerNumber","handleUpdatePlayerNumber","handleGoToHoleNumber","handleGoToExcessPlayers","Components_OptionSelectionBanner","handleGoToPlayerNumber","Components_HoleNumber","handleGoToEnterNameState","Components_EnterNames","handleSetListOfPlayers","handleGoToPlayGameState","Components_PlayGameState","handleGettingPlayerData","handleGoToAreYouSurePage","Components_ExcessPlayerPage","Components_AreYouSure","handleResetGame","goingToReturnToPlayGameState","handleGoToReturnToPlayState","Components_ResultsPage","alert","handleGotToResultsPage","href","rel","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac116194.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n/*\r\n    @ToDo:\r\n    <DONE> Make default button options cus typing a number is shit painful\r\n    <>\r\n    <>\r\n    <>\r\n    <>\r\n*/\r\n\r\n// Stylesheets\r\nimport './STYLE_EnterPlayerNumber.css';\r\n\r\nclass PlayerNumber extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state={\r\n            inputNumber: ''\r\n        }\r\n    }\r\n\r\n    /* // deprecated function no longer in use\r\n    handleSubmit(e){\r\n        if(this.refs.number.value === ''){\r\n            alert('Please enter a value');\r\n        }\r\n        else{\r\n            this.setState({\r\n                inputNumber: this.refs.number.value\r\n            }, function(){\r\n                console.log(this.state);\r\n                this.props.numberOfPlayers(this.state.inputNumber);\r\n                this.props.goingToNumberOfHoles();\r\n            });\r\n        }\r\n\r\n        e.preventDefault();\r\n    }\r\n    */\r\n\r\n    handleDefaultPlayers(num){\r\n        this.setState({\r\n            inputNumber: num\r\n        }, function(){\r\n            console.log(this.state);\r\n            this.props.numberOfPlayers(this.state.inputNumber);\r\n            this.props.goingToNumberOfHoles();\r\n        });\r\n    }\r\n\r\n    handleExcessPlayers(){\r\n        this.props.goingToExcessPlayers();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form>\r\n                    Select Number of Players:\r\n                    <ul className=\"listPlayerNumber\">\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 1)} className=\"playerNumberButton1\"> 1 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 2)} className=\"playerNumberButton\"> 2 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 3)} className=\"playerNumberButton\"> 3 </button>\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <ul className=\"listPlayerNumber\">\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 4)} className=\"playerNumberButton\"> 4 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 5)} className=\"playerNumberButton\"> 5 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 6)} className=\"playerNumberButton\"> 6 </button>\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <ul className=\"listPlayerNumber\">\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 7)} className=\"playerNumberButton\"> 7 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 8)} className=\"playerNumberButton\"> 8 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleExcessPlayers.bind(this)} className=\"playerNumberButton8plus\"> 8+ </button>\r\n                        </li>\r\n                    </ul>\r\n                </form>                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerNumber;","import React, { Component } from 'react';\r\n\r\n/*\r\n    @To-Do:\r\n\r\n    <DONE> Have default 9 hole or 18 hole option\r\n    <>\r\n    <>\r\n    <>\r\n*/\r\n\r\n\r\n// Stylesheets\r\nimport './STYLE_EnterHoleNumber.css';\r\n\r\nclass HoleNumber extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state={\r\n            inputNumber: ''\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deprecated Method\r\n     */\r\n\r\n    /*\r\n    handleSubmit(e){\r\n        if(this.refs.number.value === ''){\r\n            alert('Please enter a value');\r\n        }\r\n        else{\r\n            this.setState({\r\n                inputNumber: this.refs.number.value\r\n            }, function(){\r\n                console.log(this.state);\r\n                this.props.numberOfHoles(this.state.inputNumber);\r\n                this.props.goingToEnterNameState();\r\n            });\r\n        }\r\n\r\n        e.preventDefault();\r\n    }\r\n    */\r\n\r\n    handleDefaultHoles(num){\r\n        //alert(num);\r\n        this.setState({\r\n            inputNumber: num\r\n        }, function(){\r\n            console.log(this.state);\r\n            this.props.numberOfHoles(num);\r\n            this.props.goingToEnterNameState();\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                Select Number of Holes:\r\n                 <form> \r\n                     <ul className=\"listHoleNumber\">\r\n                         <li>\r\n                            <button onClick={this.handleDefaultHoles.bind(this, '9')} className=\"holeNumberButton\" id=\"nineHoles\"> 9 Holes </button>\r\n                         </li>\r\n                         <li>\r\n                            <button onClick={this.handleDefaultHoles.bind(this, '18')} className=\"holeNumberButton\" id=\"eighteenHoles\"> 18 Holes </button>\r\n                         </li>\r\n                     </ul>\r\n                 </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HoleNumber;","import React, { Component } from 'react';\r\n\r\n// Stylesheets\r\nimport './STYLE_EnterNames.css';\r\n\r\nclass EnterNames extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            listOfPlayers: [],\r\n            numberOfPlayers:'',\r\n\r\n            realFields: {},\r\n\r\n            fields: {},\r\n            errors: {},\r\n            missingPlayers: []\r\n        }\r\n    }\r\n\r\n    handleValidation(){\r\n        let fields = this.state.fields;\r\n        let realFields = this.state.realFields;\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n        let fieldIsEmpty = false;\r\n\r\n        // fields has player1:qwe, player2:qwe etc\r\n        // So if we dont have a PlayerX, then it means its empty\r\n\r\n        for(var i in realFields){\r\n            console.log(\"fields[i]: \" + fields[i]); // Paul, Monica, Other, etc ...\r\n            console.log(\"i: \" + i); // player1, player2, player3 ...\r\n            if(!fields[i]){\r\n                formIsValid = false;\r\n                fieldIsEmpty = true;\r\n                errors[i] = \"Cannot be empty\";\r\n            }\r\n            else{\r\n                fieldIsEmpty = false;\r\n            }\r\n\r\n            if(typeof fields[i] !== 'undefined' && !fieldIsEmpty){\r\n                if(!fields[i].match(/^[a-zA-Z]+$/)){\r\n                    formIsValid = false;\r\n                    errors[i] = \"You may enter only letters\";\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n        return formIsValid;\r\n    }\r\n\r\n    handleChange(field, e){ // field is player1, player2 etc, and e is ['P', 'Pa', 'Pau', 'Paul']\r\n        let fields = this.state.fields;\r\n        let realFields = this.state.realFields;\r\n        \r\n        fields[field] = e.target.value;\r\n        realFields[field] = e.target.value;\r\n\r\n        console.log(fields[field]);\r\n        this.setState({fields});\r\n        this.setState({realFields});\r\n    }\r\n    \r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n\r\n        if(this.handleValidation()){\r\n            for(var ref in this.refs){\r\n                this.state.listOfPlayers.push(this.refs[ref].value);\r\n            }\r\n        \r\n            this.props.setListOfPlayers(this.state.listOfPlayers);\r\n            this.props.goingToPlayGameState();\r\n        }\r\n        else{\r\n            // There is a Form Error\r\n        }\r\n    }\r\n\r\n    render(){\r\n        this.state.numberOfPlayers =  this.props.numberOfPlayers;\r\n\r\n        // Initializing Array for destroying null array\r\n        let tempArray = [];\r\n        for(var i = 0; i < parseInt(this.state.numberOfPlayers); i++){\r\n            tempArray.push(i);\r\n        }\r\n\r\n        // Creating list of input fields for players Names, ref references for each input field is player1 player2 ... etc\r\n        let theFields;\r\n        theFields = tempArray.map(x => {\r\n            let refString = 'playerNo' + (x+1);\r\n            this.state.realFields[refString] = '';\r\n            return(\r\n                <div>\r\n                    Player  {x + 1} &nbsp; &nbsp;\r\n                    <input type=\"text\" ref={refString} maxLength=\"6\" className=\"inputField\" onChange={this.handleChange.bind(this, refString)} value={this.state.fields[refString]}/>\r\n                    <br/>\r\n                    <span className=\"error\">{this.state.errors[refString]}</span>\r\n                    <br/><br/>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        // Render Component\r\n        return(\r\n            <div>\r\n                <p>Enter your names:</p>\r\n                <form onSubmit={this.handleSubmit.bind(this)}>\r\n                    {theFields}\r\n                    <br/>\r\n                    <input id=\"submitButton\" type=\"submit\" value=\"Start\" className=\"submitButton\"/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnterNames;","import React, { Component } from 'react';\r\n\r\n// Stylesheets\r\nimport './STYLE_SingleHoleInfoTopComponent.css';\r\n\r\nclass SingleHoleInfoTopComponent extends Component{\r\n\r\n    handleUpdateHoleNumber(direction){\r\n        this.props.handleUpdateHoleNumber(direction);\r\n    }\r\n\r\n    handleUpdateParNumber(direction){\r\n        this.props.handleUpdateParNumber(direction);\r\n    }\r\n\r\n    render(){\r\n\r\n        let currentHole = this.props.currentHole + 1;\r\n        let par = this.props.par;\r\n        let latestHole = this.props.latestHole;\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <span className=\"headerArea\">\r\n                        <button onClick={this.handleUpdateHoleNumber.bind(this, 'prev')} className=\"HoleArrowButton\"> &#9664; </button>\r\n                        &nbsp; Hole {currentHole} &nbsp;\r\n                        <button onClick={this.handleUpdateHoleNumber.bind(this, 'next')} className=\"HoleArrowButton\"> &#9654; </button> \r\n                    </span>\r\n                </div>\r\n\r\n                <div>\r\n                    <span className=\"latestHoleLabel\">\r\n                        Last Played Hole: <b>{latestHole}</b>\r\n                    </span>\r\n                </div>\r\n\r\n                <br/>\r\n                \r\n                <div className=\"parData\">\r\n                        PAR &nbsp; &nbsp;\r\n                        <button onClick={this.handleUpdateParNumber.bind(this, 'minus')} className=\"ParArrowButtonMINUS\"> - </button>\r\n                        &nbsp; <span className=\"parNumber\"> {par} </span> &nbsp;\r\n                        <button onClick={this.handleUpdateParNumber.bind(this, 'add')} className=\"ParArrowButtonPLUS\"> + </button> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleHoleInfoTopComponent;","import React, { Component } from 'react';\r\n\r\n// Stylesheets\r\nimport './STYLE_SingleHoleInfoBottomComponent.css';\r\n\r\nclass SingleHoleInfoPlayerComponent extends Component{\r\n\r\n    handleUpdatePlayers(name, isGoingDown){\r\n        console.log(\"Handling Update Players in SingleHoleInfoPlayerComponent\");\r\n        this.props.updatePlayerData(name, isGoingDown);\r\n        this.props.updatePlayerDataForHole(name, isGoingDown);\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render(){\r\n        \r\n        let toRender = this.props.listOfPlayersData.map(player => {\r\n\r\n            // Overall PAR-Score\r\n            let parScoreString;\r\n            let score = 0;\r\n            for(var i in player.holeData){\r\n                score += player.holeData[i] - this.props.holeData[i].par;\r\n            }\r\n\r\n            if(score > 0){\r\n                parScoreString = \"+\" + score;\r\n            }\r\n            else if(score === 0){\r\n                parScoreString = \"E\";\r\n            }\r\n            else{\r\n                parScoreString = score;\r\n            }\r\n\r\n            // Current Hole PAR-Score\r\n            let parScoreString2;\r\n            let score2 = player.holeData[this.props.currentHole] - this.props.holeData[this.props.currentHole].par;\r\n\r\n            if(score2 > 0){\r\n                parScoreString2 = \"+\" + score2;\r\n            }\r\n            else if(score2 === 0){\r\n                parScoreString2 = \"E\";\r\n            }\r\n            else{\r\n                parScoreString2 = score2;\r\n            }\r\n\r\n            // Getting Player Overall Total-Score (Up until the current hole)\r\n            let totalOverallScore = 0;\r\n            for(var u = 0; u <= this.props.currentHole; u++){\r\n                totalOverallScore += player.holeData[u];\r\n            }\r\n\r\n            return(\r\n                <tr>\r\n                    <td>\r\n                        <span className=\"playerNameText\">{player.name}</span>\r\n                    </td>\r\n\r\n                    <td>\r\n                        <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <span>Total</span>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <span className=\"currentHoleScore\"> \r\n                                        {\r\n                                        //player.totalScore\r\n                                        totalOverallScore\r\n                                        }\r\n                                        <span className=\"parScore\"> ( {parScoreString} ) </span>\r\n                                    </span>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                        </table>\r\n                    </td>\r\n\r\n                    <td>\r\n                        <table>\r\n                            <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    Current\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={this.handleUpdatePlayers.bind(this, player.name, true)} className=\"playerScoreButtonMINUS\"> - </button> &nbsp;\r\n                                         <span className=\"currentHoleScore\">\r\n                                            {player.holeData[this.props.currentHole]}\r\n                                            <span className=\"parScore\"> ( {parScoreString2} ) </span>\r\n                                         </span>\r\n                                    &nbsp; <button onClick={this.handleUpdatePlayers.bind(this, player.name, false)} className=\"playerScoreButtonPLUS\"> + </button> \r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <table className=\"playerTable\">\r\n                <tbody>\r\n                    {toRender}\r\n                </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleHoleInfoPlayerComponent;","import React, { Component } from 'react';\r\n\r\n// Components\r\nimport SingleHoleInfoTopComponent from './SingleHoleInfoTopComponent';\r\nimport SingleHoleInfoPlayerComponent from './SingleHoleInfoPlayerComponent'\r\n\r\nclass SingleHoleInfo extends Component{\r\n\r\n    render(){\r\n\r\n        let topComponent = <SingleHoleInfoTopComponent \r\n        currentHole={this.props.holeNumber}\r\n        handleUpdateHoleNumber={this.props.updateHoleNumber.bind(this)}\r\n        handleUpdateParNumber={this.props.updateParNumber.bind(this)}\r\n        par={this.props.par}\r\n        latestHole={this.props.latestHole}\r\n        />;\r\n\r\n        let playerComponent = <SingleHoleInfoPlayerComponent \r\n        listOfPlayersData={this.props.listOfPlayersData}\r\n        updatePlayerData={this.props.updatePlayerData}\r\n        updatePlayerDataForHole={this.props.updatePlayerDataForHole}\r\n        currentHole={this.props.holeNumber}\r\n        par={this.props.par}\r\n        holeData={this.props.holeData}\r\n        numberOfHoles={this.props.numberOfHoles}\r\n        />;\r\n\r\n        return (\r\n            <div>\r\n                {topComponent}\r\n                <br/><br/>\r\n                {playerComponent}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleHoleInfo;","import React, {Component} from 'react';\r\n\r\n// Components\r\nimport SingleHoleInfo from './SingleHoleInfo';\r\n\r\nconst initialState = {\r\n    numberOfHoles: '',\r\n    holesData: [],\r\n    holeToDisplay: 0,\r\n\r\n    players: [],\r\n    playersData: [],\r\n    initialRender: true,\r\n\r\n    latestHole: 1    \r\n};\r\n\r\nclass PlayGameState extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = initialState;\r\n    }\r\n\r\n    handleUpdateParNumber(direction){\r\n        let currentHoleToDisplay = this.state.holeToDisplay;\r\n        let currentHoleParNumber = this.state.holesData[currentHoleToDisplay].par;\r\n\r\n        //console.log(\"DEBUG: CurrentHoleToDisplay: \" + (currentHoleToDisplay + 1));\r\n        //console.log(\"DEBUG: CurrentHoleParNumber: \" + currentHoleParNumber);\r\n\r\n        for(var i in this.state.holesData){ \r\n            if(this.state.holesData[i].holeNumber === currentHoleToDisplay){\r\n                if(direction === 'minus'){\r\n                    if(currentHoleParNumber > 0){\r\n                        this.state.holesData[i].par = currentHoleParNumber - 1;\r\n                    }\r\n                    else{\r\n                        // Disable '-' Button\r\n                    }\r\n                }\r\n                else if(direction === 'add'){\r\n                    this.state.holesData[i].par = currentHoleParNumber + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        //console.log(\"Current Hole to Display: \" + (this.state.holeToDisplay + 1));\r\n        //console.log(\"Got told to display: \" + (this.state.holesData[currentHoleToDisplay].holeNumber + 1));\r\n        //console.log(\"Updated Par: \" + this.state.holesData[currentHoleToDisplay].par);\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    handleUpdateWhichHoleToShow(direction){\r\n        let currentHoleToDisplay = this.state.holeToDisplay;\r\n        if(direction === 'prev'){\r\n            if(this.state.holeToDisplay > 0){\r\n                this.state.holeToDisplay = currentHoleToDisplay - 1;\r\n            }\r\n            else{\r\n                // Disable '-' button\r\n            }\r\n        }\r\n        else if(direction === 'next'){\r\n            if(this.state.holeToDisplay < parseInt(this.state.numberOfHoles - 1)){\r\n                this.state.holeToDisplay = currentHoleToDisplay + 1;\r\n            }\r\n            else{\r\n                // Disable '+' button\r\n            }\r\n        }\r\n\r\n        /* Handling Updating Latest Hole */\r\n        if(this.state.holeToDisplay >= this.state.latestHole){\r\n            this.state.latestHole = this.state.holeToDisplay + 1; // Using this.setState() doesn't update instantly\r\n        }\r\n\r\n        /* Handling to show exit to results */\r\n        if(this.state.holeToDisplay === parseInt(this.state.numberOfHoles) - 1){\r\n            this.props.handleTriggerFinalHole(true);\r\n            this.props.sendPlayerData(this.state.playersData);\r\n        }\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    setHoleData(){\r\n        for(var i = 0; i < parseInt(this.state.numberOfHoles); i++){\r\n            this.state.holesData.push({\r\n                holeNumber: i,\r\n                par: 3,\r\n            });\r\n        }\r\n    }\r\n\r\n    setPlayerData(){\r\n        let tempTotalScore = 3 * parseInt(this.state.numberOfHoles);\r\n        for(var player in this.state.players){\r\n            this.state.playersData.push({\r\n                name: this.state.players[player],\r\n                rawTotalScore: 0, // keeps track of TOTAL-scores\r\n                totalScore: tempTotalScore, // keeps track of PAR-OVER-scores\r\n                rawHoleData: [],\r\n                holeData: [],\r\n            });\r\n        }\r\n\r\n        for(var u in this.state.players){\r\n            for(var i = 0; i < this.state.numberOfHoles; i++){\r\n                this.state.playersData[u].holeData.push(3);\r\n                this.state.playersData[u].rawHoleData.push(0);\r\n            }\r\n\r\n            //console.log(\"Player Hole Data | Name: \" + this.state.playersData[u].name + \" HoleData: \" + this.state.playersData[u].holeData);\r\n        }\r\n    }\r\n\r\n    updatePlayerData(player, isGoingDown){\r\n        for(var i in this.state.playersData){\r\n            let singlePlayer = this.state.playersData[i];\r\n\r\n            if(singlePlayer.name === player){\r\n                let currentScore = this.state.playersData[i].totalScore;\r\n                let currentRawScore = this.state.playersData[i].rawTotalScore;\r\n\r\n                if(isGoingDown){\r\n                    this.state.playersData[i].totalScore = currentScore - 1;\r\n                    this.state.playersData[i].rawTotalScore = currentRawScore - 1;\r\n                }\r\n                else{\r\n                    this.state.playersData[i].totalScore = currentScore + 1;\r\n                    this.state.playersData[i].rawTotalScore = currentRawScore + 1;\r\n                } \r\n            }\r\n        }\r\n    }\r\n\r\n    updatePlayerDataForHole(player, isGoingDown){\r\n        for(var i in this.state.playersData){ // finding right player\r\n            let singlePlayer = this.state.playersData[i]\r\n            let currentHole = this.state.holeToDisplay;\r\n\r\n            if(singlePlayer.name === player){// if we found correct player\r\n                let currentScoreForThatHole = singlePlayer.holeData[currentHole];\r\n                let currentRAWScoreForThatHole = singlePlayer.rawHoleData[currentHole];\r\n\r\n                if(isGoingDown){\r\n                    this.state.playersData[i].holeData[currentHole] = currentScoreForThatHole - 1;\r\n                    this.state.playersData[i].rawHoleData[currentHole] = currentRAWScoreForThatHole - 1;\r\n                }\r\n                else{\r\n                    this.state.playersData[i].holeData[currentHole] = currentScoreForThatHole + 1;\r\n                    this.state.playersData[i].rawHoleData[currentHole] = currentRAWScoreForThatHole + 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        if(this.state.initialRender){\r\n            this.state.numberOfHoles = this.props.numberOfHoles; // Using setState() for these also slows things down\r\n            this.state.players = this.props.players;\r\n            this.setPlayerData();\r\n            this.setHoleData();\r\n\r\n            this.state.initialRender = false;\r\n        }\r\n\r\n        let toRender;\r\n\r\n        let arrayOfSingleHoleInfoComponents = this.state.holesData.map( currentHole => {\r\n            return (\r\n                <div>\r\n                    <SingleHoleInfo\r\n                    holeNumber={currentHole.holeNumber}\r\n                    listOfPlayersData={this.state.playersData}\r\n                    updatePlayerData={this.updatePlayerData.bind(this)}\r\n                    updatePlayerDataForHole={this.updatePlayerDataForHole.bind(this)}\r\n                    updateHoleNumber={this.handleUpdateWhichHoleToShow.bind(this)} \r\n                    updateParNumber={this.handleUpdateParNumber.bind(this)}\r\n                    par={currentHole.par}\r\n                    holeData={this.state.holesData}\r\n                    numberOfHoles={this.state.numberOfHoles}\r\n                    latestHole={this.state.latestHole}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n\r\n        /*\r\n        // rendering just one sample of singleHoleInfo whilst implementing design of singleHoleInfo\r\n        // @To-Do: need to implement switch-case where which singleHoleInfo to show\r\n        let toRender = <SingleHoleInfo\r\n        listOfPlayersData={this.state.playersData}\r\n        updatePlayerData={this.updatePlayerData.bind(this)}\r\n\r\n        />\r\n        */\r\n\r\n        // Which Hole to show\r\n        for(var i in arrayOfSingleHoleInfoComponents){\r\n            if(parseInt(i) === this.state.holeToDisplay){\r\n                toRender = arrayOfSingleHoleInfoComponents[i];\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                {toRender} \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayGameState;","import React, {Component} from 'react';\r\n\r\nclass ExcessPlayerPage extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <p> tell some people to quit cus 8+ is too many people ... </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExcessPlayerPage;","import React, { Component } from 'react';\r\n\r\n// Stylesheets\r\nimport './STYLE_OptionSelectionBanner.css';\r\n\r\nclass OptionSelectionBanner extends Component{\r\n\r\n    render(){\r\n        let players = this.props.numberOfPlayers;\r\n        let holes = this.props.numberOfHoles;\r\n        let currentComponent = this.props.currentComponent;\r\n\r\n        if(currentComponent === 'playGameState'){\r\n            return(\r\n                <div>\r\n                    Players: {players} | Holes: {holes} \r\n                    <br/> <br/> \r\n                    <span onClick={this.props.goingToAreYouSurePage} className=\"infoBannerPLAY\"> Reset Game &#8635; </span>\r\n                </div>\r\n            );\r\n        }\r\n        else if(currentComponent === 'playerNumberState'){\r\n            return(\r\n                <div>\r\n                    <span className=\"infoBannerPLAYERNUMBER\"> Players: {players} </span>\r\n                    <span className=\"paddingThingy\"> | </span>\r\n                    <span className=\"infoBannerPLAYERNUMBER\"> Holes: {holes} </span>\r\n                </div>\r\n            );\r\n        }\r\n        else if(currentComponent === 'holeNumberState'){\r\n            return(\r\n                <div>\r\n                    <span onClick={this.props.goingToNumberOfPlayers} className=\"infoBannerHOLENUMBERplayer\"> Players: {players} </span>\r\n                    <span className=\"paddingThingy\"> | </span>\r\n                    <span onClick={this.props.goingToNumberOfHoles} className=\"infoBannerHOLENUMBER\"> Holes: {holes} </span>\r\n                </div>\r\n            );\r\n        }\r\n        else if(currentComponent === 'EnterNameState'){\r\n            return(\r\n                <div>\r\n                    <span onClick={this.props.goingToNumberOfPlayers} className=\"infoBannerENTERNAMES\"> Players: {players} </span>\r\n                    <span className=\"paddingThingy\"> | </span>\r\n                    <span onClick={this.props.goingToNumberOfHoles} className=\"infoBannerENTERNAMES\"> Holes: {holes} </span>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default OptionSelectionBanner;","import React, {Component} from 'react';\r\n\r\n// Stylesheets\r\nimport './STYLE_AreYouSure.css';\r\n\r\nclass AreYouSure extends Component{\r\n\r\n    // should be onClick={this.props.goingToReturnToPlayGameState} for second button\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <p>This will Reset <u>Everything</u>, Are you sure?</p>\r\n                <ul>\r\n                    <li><button onClick={this.props.goingToResetGame} className=\"resetButtons\"> Yes </button></li>\r\n                    <li> or </li>\r\n                    <li><button onClick={this.props.goingToResetGame} className=\"resetButtons\"> Yes </button></li>\r\n                    <li>(This is no Joke, I dunno how to code 'No' Option, so you're fucked)</li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AreYouSure;","import React, {Component} from 'react';\r\n\r\n// Stylesheets\r\nimport './STYLE_Results.css'\r\n\r\nclass ResultsPage extends Component{\r\n\r\n    getColor(x){\r\n        if(x === 1){\r\n            return \"gold\";\r\n        }\r\n        else if(x === 2){\r\n            return \"green\";\r\n        }\r\n        else if(x === 4){\r\n            return \"blue\";\r\n        }\r\n        else if( x >= 5){\r\n            return \"red\";\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let things = this.props.data.map(player => {\r\n            let scores = player.holeData.map(x => {\r\n                let classColor = this.getColor(x) + \" scoreCell\";\r\n                return(\r\n                    <td className={classColor}>\r\n                        {x}\r\n                    </td>\r\n                );\r\n            });\r\n\r\n            /* Making an excuse-array for making .map function to make hole numbers at top row */\r\n            let workingArray = [];\r\n            for(var i = 0; i < parseInt(this.props.holes); i++){\r\n                workingArray.push(i + 1);\r\n            }\r\n\r\n            /* Making an excuse-array for making .map function to make hole numbers at top row */\r\n            let topBit = workingArray.map(x => {\r\n                return(\r\n                    <td className=\"scoreCell holeNumberCell\">\r\n                        {x}\r\n                    </td>\r\n                );\r\n            });\r\n\r\n            return(\r\n               <div className=\"resultsPage\">\r\n\r\n                   <span><b> {player.name} ( {player.totalScore} ) </b></span>\r\n\r\n                   <table className=\"resultsTable\">\r\n                       <tbody>\r\n                           <tr>\r\n                               {topBit}\r\n                           </tr>\r\n                           <tr>\r\n                               {scores}\r\n                           </tr>\r\n                       </tbody>\r\n                   </table>\r\n                   \r\n                   <br/><br/>\r\n\r\n               </div>\r\n            );\r\n        });\r\n\r\n        return(\r\n            <div className=\"resultsTable\">\r\n                <div>\r\n                    <button className=\"resultsNavItem\"> Save </button> &nbsp; | &nbsp;\r\n                    <button className=\"resultsNavItem\"> Restart </button> &nbsp; | &nbsp;\r\n                    <button className=\"resultsNavItem\"> Back </button>\r\n                </div>\r\n                \r\n                <h2>Overall Scores</h2>\r\n                \r\n                <br/>\r\n                \r\n                {things}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultsPage;","import React, { Component } from 'react';\r\n\r\n// Components\r\nimport PlayerNumber from './Components/PlayerNumber';\r\nimport HoleNumber from './Components/HoleNumber';\r\nimport EnterNames from './Components/EnterNames';\r\nimport PlayGameState from './Components/PlayGameState';\r\nimport ExcessPlayerPage from './Components/ExcessPlayerPage';\r\nimport OptionSelectionBanner from './Components/OptionSelectionBanner';\r\nimport AreYouSure from './Components/AreYouSure';\r\nimport ResultsPage from './Components/ResultsPage';\r\n\r\n// Stylesheets\r\nimport './App.css';\r\n\r\nconst initialState = {\r\n  currentComponent: 'playerNumberState',\r\n  playerNumber: ' ', // if '' empty string, then props assignment doesn't seem to work\r\n  holes: ' ',\r\n  players: [],\r\n\r\n  isFinalHole: false,\r\n\r\n  stack: [],\r\n\r\n  playerData:[]\r\n};\r\n\r\nclass App extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = initialState;\r\n  }\r\n\r\n  /* Getting Number of Players */\r\n  handleUpdatePlayerNumber(number){\r\n    this.setState({playerNumber: number});\r\n    console.log(\"Number of Players: \" + this.state.playerNumber);\r\n  }\r\n\r\n  handleGoToHoleNumber(){\r\n    this.setState({currentComponent: 'holeNumberState'});\r\n  }\r\n\r\n  handleGoToPlayerNumber(){\r\n    this.setState({currentComponent: 'playerNumberState'});\r\n  }\r\n\r\n  /* Getting Number of Holes */\r\n  handleUpdateHoleNumber(number){\r\n    this.setState({holes: number});\r\n    console.log(\"Number of Holes: \" + this.state.holes);\r\n  }\r\n\r\n  handleGoToEnterNameState(){\r\n    this.setState({currentComponent: 'EnterNameState'})\r\n  }\r\n\r\n  handleGoToPlayGameState(){\r\n    this.setState({currentComponent: 'playGameState'})\r\n  }\r\n\r\n  handleGoToExcessPlayers(){\r\n    this.setState({currentComponent: 'excessPlayers'});\r\n  }\r\n\r\n  handleSetListOfPlayers(mylist){\r\n    this.setState({players: mylist});\r\n    console.log(\"List of Players: \" + this.state.players);\r\n  }\r\n\r\n  handleGoToAreYouSurePage(){\r\n    this.setState({currentComponent: 'areYouSure'});\r\n  }\r\n\r\n  handleGoToReturnToPlayState(){\r\n    this.setState({currentComponent: 'resumePlay'});\r\n  }\r\n\r\n  handleResetGame(){\r\n    this.setState({initialState});\r\n    this.setState({currentComponent: 'playerNumberState'});\r\n  }\r\n\r\n  handleTriggerFinalHole(isFinalHole){\r\n    if(isFinalHole){\r\n      this.setState({isFinalHole: true});\r\n    }\r\n    else{\r\n      this.setState({isFinalHole: false});\r\n    }\r\n  }\r\n\r\n  handleGotToResultsPage(){\r\n    this.setState({currentComponent: 'resultsPage'});\r\n  }\r\n\r\n  handleGettingPlayerData(data){\r\n    this.setState({playerData: data});\r\n  }\r\n\r\n  render() {\r\n\r\n    let toRender;\r\n    let showBanner;\r\n    let finnishAndResults;\r\n\r\n    if(this.state.currentComponent === 'playerNumberState'){\r\n        toRender = <PlayerNumber \r\n        numberOfPlayers={this.handleUpdatePlayerNumber.bind(this)}\r\n        goingToNumberOfHoles={this.handleGoToHoleNumber.bind(this)}\r\n        goingToExcessPlayers={this.handleGoToExcessPlayers.bind(this)}\r\n        />;\r\n\r\n        showBanner = <OptionSelectionBanner\r\n        numberOfHoles = {this.state.holes}\r\n        numberOfPlayers = {this.state.playerNumber}\r\n        currentComponent = {this.state.currentComponent}\r\n        goingToNumberOfHoles = {this.handleGoToHoleNumber.bind(this)}\r\n        goingToNumberOfPlayers = {this.handleGoToPlayerNumber.bind(this)}\r\n        />;\r\n    }\r\n    else if(this.state.currentComponent === 'holeNumberState'){\r\n      toRender = <HoleNumber \r\n      numberOfHoles={this.handleUpdateHoleNumber.bind(this)}\r\n      goingToEnterNameState={this.handleGoToEnterNameState.bind(this)}\r\n      />;\r\n\r\n      showBanner = <OptionSelectionBanner\r\n      numberOfHoles = '-'\r\n      numberOfPlayers = {this.state.playerNumber}\r\n      currentComponent = {this.state.currentComponent}\r\n      goingToNumberOfHoles={this.handleGoToHoleNumber.bind(this)}\r\n      goingToNumberOfPlayers={this.handleGoToPlayerNumber.bind(this)}\r\n      />;\r\n    }\r\n    else if(this.state.currentComponent === 'EnterNameState'){\r\n      toRender = <EnterNames \r\n      setListOfPlayers={this.handleSetListOfPlayers.bind(this)}\r\n      numberOfPlayers={this.state.playerNumber}\r\n      goingToPlayGameState={this.handleGoToPlayGameState.bind(this)}\r\n      />;\r\n\r\n      showBanner = <OptionSelectionBanner\r\n      numberOfHoles = {this.state.holes}\r\n      numberOfPlayers = {this.state.playerNumber}\r\n      currentComponent = {this.state.currentComponent}\r\n      goingToNumberOfHoles = {this.handleGoToHoleNumber.bind(this)}\r\n      goingToNumberOfPlayers = {this.handleGoToPlayerNumber.bind(this)}\r\n      />;\r\n    }\r\n    else if(this.state.currentComponent === 'playGameState'){\r\n      toRender = <PlayGameState\r\n      numberOfHoles = {this.state.holes}\r\n      players = {this.state.players}\r\n      handleTriggerFinalHole={this.handleTriggerFinalHole.bind(this)}\r\n      sendPlayerData={this.handleGettingPlayerData.bind(this)}\r\n      />;\r\n\r\n      showBanner = <OptionSelectionBanner\r\n      numberOfHoles = {this.state.holes}\r\n      numberOfPlayers = {this.state.playerNumber}\r\n      currentComponent = {this.state.currentComponent}\r\n      goingToNumberOfHoles = {this.handleGoToHoleNumber.bind(this)}\r\n      goingToNumberOfPlayers = {this.handleGoToPlayerNumber.bind(this)}\r\n      goingToAreYouSurePage = {this.handleGoToAreYouSurePage.bind(this)}\r\n      />;\r\n\r\n      this.state.stack.push(toRender);\r\n      this.state.stack.push(showBanner);\r\n    }\r\n    else if(this.state.currentComponent === 'excessPlayers'){\r\n      toRender = <ExcessPlayerPage\r\n      />;\r\n    }\r\n    else if(this.state.currentComponent === 'areYouSure'){\r\n      toRender = <AreYouSure\r\n      goingToResetGame = {this.handleResetGame.bind(this)}\r\n      goingToReturnToPlayGameState = {this.handleGoToReturnToPlayState.bind(this)}\r\n      />;\r\n    }\r\n    else if(this.state.currentComponent === 'resumePlay'){\r\n      showBanner = this.state.stack[1];\r\n      toRender = this.state.stack[0]; \r\n    }\r\n    else if(this.state.currentComponent === 'resultsPage'){\r\n      toRender = <ResultsPage\r\n      data={this.state.playerData}\r\n      holes={this.state.holes}\r\n      />\r\n    }\r\n    else{\r\n      alert('Extremely Fatal Error Occured - There was no page to load');\r\n    }\r\n\r\n    // If we reach final Hole, then give user option to exit game and show overall results\r\n    if(this.state.isFinalHole && this.state.currentComponent === 'playGameState'){\r\n      finnishAndResults = <span className=\"resultsButton\" onClick={this.handleGotToResultsPage.bind(this)}>Finnish and Display Results</span>;\r\n    }\r\n    else{\r\n      finnishAndResults = '';\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <link href=\"https://fonts.googleapis.com/css?family=Gruppo\" rel=\"stylesheet\"/>\r\n          <link href=\"https://fonts.googleapis.com/css?family=Harmattan\" rel=\"stylesheet\"/>\r\n\r\n          <div className=\"banner\">\r\n            {showBanner}\r\n          </div>\r\n\r\n          {toRender}\r\n\r\n          <br/>\r\n\r\n          {finnishAndResults}\r\n        </header>\r\n\r\n        <br/> <br/>\r\n        <footer> Created By Paul Yoon (kodawarii/ayamachi, S'Eunbal'K_DU`Development 2019©) </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Components/PlayerNumber.js","Components/HoleNumber.js","Components/EnterNames.js","Components/HoleBanner.js","Components/SingleHoleInfoTopComponent.js","Components/SingleHoleInfoPlayerComponent.js","Components/SingleHoleInfo.js","Components/PlayGameState.js","Components/ExcessPlayerPage.js","Components/OptionSelectionBanner.js","Components/AreYouSure.js","Components/ResultsPage.js","App.js","serviceWorker.js","index.js"],"names":["PlayerNumber","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputNumber","num","setState","console","log","props","numberOfPlayers","goingToNumberOfHoles","goingToExcessPlayers","react_default","a","createElement","className","onClick","handleDefaultPlayers","bind","handleExcessPlayers","Component","HoleNumber","numberOfHoles","goingToEnterNameState","handleDefaultHoles","id","EnterNames","listOfPlayers","realFields","fields","errors","missingPlayers","formIsValid","fieldIsEmpty","i","match","field","e","target","value","preventDefault","handleValidation","ref","refs","push","setListOfPlayers","goingToPlayGameState","_this2","theFields","tempArray","parseInt","map","x","refString","type","maxLength","onChange","handleChange","onSubmit","handleSubmit","HoleBanner","changeWhichHoleToShow","bufferArray","bufferArray2","collection2","collection","currentHole","holesData","status","goToHole","SingleHoleInfoTopComponent","direction","handleUpdateHoleNumber","handleUpdateParNumber","par","latestHole","leftHoleArrowButtonClassName","rightHoleArrowButtonClassname","leftPARButtonMINUS","holeData","length","Components_HoleBanner","SingleHoleInfoPlayerComponent","name","isGoingDown","updatePlayerData","updatePlayerDataForHole","forceUpdate","toRender","listOfPlayersData","player","parScoreString","parScoreString2","score","score2","totalOverallScore","u","currentHoleScore","scoreButtonLeft","handleUpdatePlayers","SingleHoleInfo","finnishButton","topComponent","Components_SingleHoleInfoTopComponent","holeNumber","updateHoleNumber","updateParNumber","playerComponent","Components_SingleHoleInfoPlayerComponent","completeHole","initialState","holeToDisplay","players","playersData","initialRender","PlayGameState","currentHoleToDisplay","currentHoleParNumber","totalScore","currentRawScore","parScore","handleUpdateHolesData","handleTriggerFinalHole","sendPlayerData","hole","handleSetHoleData","tempTotalScore","rawHoleData","currentScore","singlePlayer","currentScoreForThatHole","currentRAWScoreForThatHole","setPlayerData","setHoleData","arrayOfSingleHoleInfoComponents","Components_SingleHoleInfo","handleUpdateWhichHoleToShow","ExcessPlayerPage","OptionSelectionBanner","holes","currentComponent","goingToAreYouSurePage","goingToNumberOfPlayers","AreYouSure","goingToResetGame","lol","ResultsPage","things","data","scores","classColor","getColor","workingArray","parOverScore","topBit","totalPAR","playerNumber","isFinalHole","stack","playerData","App","number","mylist","showBanner","finnishAndResults","Components_PlayerNumber","handleUpdatePlayerNumber","handleGoToHoleNumber","handleGoToExcessPlayers","Components_OptionSelectionBanner","handleGoToPlayerNumber","Components_HoleNumber","handleGoToEnterNameState","Components_EnterNames","handleSetListOfPlayers","handleGoToPlayGameState","Components_PlayGameState","handleGettingPlayerData","handleSetHolesData","handleGoToAreYouSurePage","Components_ExcessPlayerPage","Components_AreYouSure","handleResetGame","goingToReturnToPlayGameState","handleGoToReturnToPlayState","Components_ResultsPage","alert","handleGotToResultsPage","href","rel","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b2207d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n/*\r\n    @ToDo:\r\n    <DONE> Make default button options cus typing a number is shit painful\r\n    <>\r\n    <>\r\n    <>\r\n    <>\r\n*/\r\n\r\n// Stylesheets\r\nimport './STYLE_EnterPlayerNumber.css';\r\n\r\nclass PlayerNumber extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state={\r\n            inputNumber: ''\r\n        }\r\n    }\r\n\r\n    /* // deprecated function no longer in use\r\n    handleSubmit(e){\r\n        if(this.refs.number.value === ''){\r\n            alert('Please enter a value');\r\n        }\r\n        else{\r\n            this.setState({\r\n                inputNumber: this.refs.number.value\r\n            }, function(){\r\n                console.log(this.state);\r\n                this.props.numberOfPlayers(this.state.inputNumber);\r\n                this.props.goingToNumberOfHoles();\r\n            });\r\n        }\r\n\r\n        e.preventDefault();\r\n    }\r\n    */\r\n\r\n    handleDefaultPlayers(num){\r\n        this.setState({\r\n            inputNumber: num\r\n        }, function(){\r\n            console.log(this.state);\r\n            this.props.numberOfPlayers(this.state.inputNumber);\r\n            this.props.goingToNumberOfHoles();\r\n        });\r\n    }\r\n\r\n    handleExcessPlayers(){\r\n        this.props.goingToExcessPlayers();\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form>\r\n                    Select Number of Players:\r\n                    <ul className=\"listPlayerNumber\">\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 1)} className=\"playerNumberButton1\"> 1 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 2)} className=\"playerNumberButton\"> 2 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 3)} className=\"playerNumberButton\"> 3 </button>\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <ul className=\"listPlayerNumber\">\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 4)} className=\"playerNumberButton\"> 4 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 5)} className=\"playerNumberButton\"> 5 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 6)} className=\"playerNumberButton\"> 6 </button>\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <ul className=\"listPlayerNumber\">\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 7)} className=\"playerNumberButton\"> 7 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleDefaultPlayers.bind(this, 8)} className=\"playerNumberButton\"> 8 </button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={this.handleExcessPlayers.bind(this)} className=\"playerNumberButton8plus\"> 8+ </button>\r\n                        </li>\r\n                    </ul>\r\n                </form>                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerNumber;","import React, { Component } from 'react';\r\n\r\n/*\r\n    @To-Do:\r\n\r\n    <DONE> Have default 9 hole or 18 hole option\r\n    <>\r\n    <>\r\n    <>\r\n*/\r\n\r\n\r\n// Stylesheets\r\nimport './STYLE_EnterHoleNumber.css';\r\n\r\nclass HoleNumber extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state={\r\n            inputNumber: ''\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deprecated Method\r\n     */\r\n\r\n    /*\r\n    handleSubmit(e){\r\n        if(this.refs.number.value === ''){\r\n            alert('Please enter a value');\r\n        }\r\n        else{\r\n            this.setState({\r\n                inputNumber: this.refs.number.value\r\n            }, function(){\r\n                console.log(this.state);\r\n                this.props.numberOfHoles(this.state.inputNumber);\r\n                this.props.goingToEnterNameState();\r\n            });\r\n        }\r\n\r\n        e.preventDefault();\r\n    }\r\n    */\r\n\r\n    handleDefaultHoles(num){\r\n        //alert(num);\r\n        this.setState({\r\n            inputNumber: num\r\n        }, function(){\r\n            console.log(this.state);\r\n            this.props.numberOfHoles(num);\r\n            this.props.goingToEnterNameState();\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                Select Number of Holes:\r\n                 <form> \r\n                     <ul className=\"listHoleNumber\">\r\n                         <li>\r\n                            <button onClick={this.handleDefaultHoles.bind(this, '9')} className=\"holeNumberButton\" id=\"nineHoles\"> 9 Holes </button>\r\n                         </li>\r\n                         <li>\r\n                            <button onClick={this.handleDefaultHoles.bind(this, '18')} className=\"holeNumberButton\" id=\"eighteenHoles\"> 18 Holes </button>\r\n                         </li>\r\n                     </ul>\r\n                 </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HoleNumber;","import React, { Component } from 'react';\r\n\r\n// Stylesheets\r\nimport './STYLE_EnterNames.css';\r\n\r\nclass EnterNames extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            listOfPlayers: [],\r\n            numberOfPlayers:'',\r\n\r\n            realFields: {},\r\n\r\n            fields: {},\r\n            errors: {},\r\n            missingPlayers: []\r\n        }\r\n    }\r\n\r\n    handleValidation(){\r\n        let fields = this.state.fields;\r\n        let realFields = this.state.realFields;\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n        let fieldIsEmpty = false;\r\n\r\n        // fields has player1:qwe, player2:qwe etc\r\n        // So if we dont have a PlayerX, then it means its empty\r\n\r\n        for(var i in realFields){\r\n            console.log(\"fields[i]: \" + fields[i]); // Paul, Monica, Other, etc ...\r\n            console.log(\"i: \" + i); // player1, player2, player3 ...\r\n            if(!fields[i]){\r\n                formIsValid = false;\r\n                fieldIsEmpty = true;\r\n                errors[i] = \"Cannot be empty\";\r\n            }\r\n            else{\r\n                fieldIsEmpty = false;\r\n            }\r\n\r\n            if(typeof fields[i] !== 'undefined' && !fieldIsEmpty){\r\n                if(!fields[i].match(/^[a-zA-Z]+$/)){\r\n                    formIsValid = false;\r\n                    errors[i] = \"You may enter only letters\";\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n        return formIsValid;\r\n    }\r\n\r\n    handleChange(field, e){ // field is player1, player2 etc, and e is ['P', 'Pa', 'Pau', 'Paul']\r\n        let fields = this.state.fields;\r\n        let realFields = this.state.realFields;\r\n        \r\n        fields[field] = e.target.value;\r\n        realFields[field] = e.target.value;\r\n\r\n        console.log(fields[field]);\r\n        this.setState({fields});\r\n        this.setState({realFields});\r\n    }\r\n    \r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n\r\n        if(this.handleValidation()){\r\n            for(var ref in this.refs){\r\n                this.state.listOfPlayers.push(this.refs[ref].value);\r\n            }\r\n        \r\n            this.props.setListOfPlayers(this.state.listOfPlayers);\r\n            this.props.goingToPlayGameState();\r\n        }\r\n        else{\r\n            // There is a Form Error\r\n        }\r\n    }\r\n\r\n    render(){\r\n        this.state.numberOfPlayers =  this.props.numberOfPlayers;\r\n\r\n        // Initializing Array for destroying null array\r\n        let tempArray = [];\r\n        for(var i = 0; i < parseInt(this.state.numberOfPlayers); i++){\r\n            tempArray.push(i);\r\n        }\r\n\r\n        // Creating list of input fields for players Names, ref references for each input field is player1 player2 ... etc\r\n        let theFields;\r\n        theFields = tempArray.map(x => {\r\n            let refString = 'playerNo' + (x+1);\r\n            this.state.realFields[refString] = '';\r\n            return(\r\n                <div>\r\n                    Player  {x + 1} &nbsp; &nbsp;\r\n                    <input type=\"text\" ref={refString} maxLength=\"6\" className=\"inputField\" onChange={this.handleChange.bind(this, refString)} value={this.state.fields[refString]}/>\r\n                    <br/>\r\n                    <span className=\"error\">{this.state.errors[refString]}</span>\r\n                    <br/><br/>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        // Render Component\r\n        return(\r\n            <div>\r\n                <p>Enter your names:</p>\r\n                <form onSubmit={this.handleSubmit.bind(this)}>\r\n                    {theFields}\r\n                    <br/>\r\n                    <input id=\"submitButton\" type=\"submit\" value=\"Start\" className=\"submitButton\"/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnterNames;","import React, { Component } from 'react';\r\n\r\n// CSS Stylesheets\r\nimport './STYLE_HoleBanner.css';\r\n\r\nclass HoleBanner extends Component{\r\n\r\n    goToHole(x){\r\n        this.props.changeWhichHoleToShow(x);\r\n    }\r\n\r\n    render(){\r\n        let numberOfHoles = this.props.numberOfHoles;\r\n\r\n        let bufferArray = [];\r\n        let bufferArray2 = [];\r\n\r\n        if(numberOfHoles == 9){\r\n            for(var i = 0; i < 9; i++){\r\n                bufferArray.push(i + 1);\r\n            }\r\n        }\r\n        else{\r\n            for(var i = 0; i < 9; i++){\r\n                bufferArray.push(i + 1);\r\n            }\r\n\r\n            for(var i = 9; i < 18; i++){\r\n                bufferArray2.push(i + 1);\r\n            }\r\n        }\r\n\r\n        let collection = bufferArray.map(x => {\r\n            let className = \"holeBannerNumberCell holeNumber\" + x;\r\n            \r\n            if(this.props.currentHole + 1 === parseInt(x)){\r\n                className += \" greyOutThisHole\";\r\n            }\r\n\r\n            if(this.props.holesData[parseInt(x) - 1].status){\r\n                className += \" finnishedHole\";\r\n            }\r\n\r\n            return(\r\n                <span className={className} onClick={this.goToHole.bind(this, x)}> {x} </span>\r\n            );\r\n        });\r\n\r\n\r\n        let collection2;\r\n        if(numberOfHoles == 18){\r\n            collection2 = bufferArray2.map(x => {\r\n                let className = \"holeBannerNumberCell holeNumber\" + x;\r\n                \r\n                if(this.props.currentHole + 1 === parseInt(x)){\r\n                    className += \" greyOutThisHole\";\r\n                }\r\n    \r\n                if(this.props.holesData[parseInt(x) - 1].status){\r\n                    className += \" finnishedHole\";\r\n                }\r\n    \r\n                return(\r\n                    <span className={className} onClick={this.goToHole.bind(this, x)}> {x} </span>\r\n                );\r\n            });\r\n        }\r\n\r\n        return(\r\n            <div className=\"holeBannerContainer\">\r\n                {collection} \r\n                <br/>\r\n                {collection2}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HoleBanner;","import React, { Component } from 'react';\r\n\r\n// Components\r\nimport HoleBanner from './HoleBanner';\r\n\r\n// Stylesheets\r\nimport './STYLE_SingleHoleInfoTopComponent.css';\r\n\r\nclass SingleHoleInfoTopComponent extends Component{\r\n\r\n    handleUpdateHoleNumber(direction){\r\n        this.props.handleUpdateHoleNumber(direction);\r\n    }\r\n\r\n    handleUpdateParNumber(direction){\r\n        this.props.handleUpdateParNumber(direction);\r\n    }\r\n\r\n    render(){\r\n\r\n        let currentHole = this.props.currentHole + 1;\r\n        let par = this.props.par;\r\n        let latestHole = this.props.latestHole;\r\n\r\n        let leftHoleArrowButtonClassName = \"HoleArrowButton\";\r\n        let rightHoleArrowButtonClassname = \"HoleArrowButton\";\r\n\r\n        let leftPARButtonMINUS = \"ParArrowButtonMINUS\";\r\n        let rightPARButtonPLUS = \"ParArrowButtonPLUS\";\r\n\r\n        if(currentHole === 1){\r\n            leftHoleArrowButtonClassName += \" disableLeftHoleArrowButton\";\r\n        }\r\n\r\n        if(currentHole === this.props.holeData.length){\r\n            rightHoleArrowButtonClassname += \" disableRightHoleArrowButton\";\r\n        }\r\n\r\n        if(par === 1){\r\n            leftPARButtonMINUS += \" disableLeftPARButton\";\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <HoleBanner\r\n                numberOfHoles={this.props.numberOfHoles}\r\n                changeWhichHoleToShow={this.props.changeWhichHoleToShow.bind(this)}\r\n                currentHole={this.props.currentHole}\r\n                holesData={this.props.holeData}\r\n                />\r\n\r\n                <div>\r\n                    <span className=\"headerArea\">\r\n                        <button onClick={this.handleUpdateHoleNumber.bind(this, 'prev')} className={leftHoleArrowButtonClassName}> &#9664; </button>\r\n                        &nbsp; Hole {currentHole} &nbsp;\r\n                        <button onClick={this.handleUpdateHoleNumber.bind(this, 'next')} className={rightHoleArrowButtonClassname}> &#9654; </button> \r\n                    </span>\r\n                </div>\r\n\r\n                <div>\r\n                    <span className=\"latestHoleLabel\">\r\n                        Last Played Hole: <b>{latestHole}</b>\r\n                    </span>\r\n                </div>\r\n\r\n                <br/>\r\n                \r\n                <div className=\"parData\">\r\n                        PAR &nbsp; &nbsp;\r\n                        <button onClick={this.handleUpdateParNumber.bind(this, 'minus')} className={leftPARButtonMINUS}> - </button>\r\n                        &nbsp; <span className=\"parNumber\"> {par} </span> &nbsp;\r\n                        <button onClick={this.handleUpdateParNumber.bind(this, 'add')} className={rightPARButtonPLUS}> + </button> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleHoleInfoTopComponent;","import React, { Component } from 'react';\r\n\r\n// Stylesheets\r\nimport './STYLE_SingleHoleInfoBottomComponent.css';\r\n\r\nclass SingleHoleInfoPlayerComponent extends Component{\r\n\r\n    handleUpdatePlayers(name, isGoingDown){\r\n        console.log(\"Handling Update Players in SingleHoleInfoPlayerComponent\");\r\n        this.props.updatePlayerData(name, isGoingDown);\r\n        this.props.updatePlayerDataForHole(name, isGoingDown);\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render(){\r\n        \r\n        let toRender = this.props.listOfPlayersData.map(player => {\r\n\r\n            // Overall PAR-Score\r\n            let parScoreString;\r\n            let score = 0;\r\n            for(var i in player.holeData){\r\n                score += player.holeData[i] - this.props.holeData[i].par;\r\n            }\r\n\r\n            if(score > 0){\r\n                parScoreString = \"+\" + score;\r\n            }\r\n            else if(score === 0){\r\n                parScoreString = \"E\";\r\n            }\r\n            else{\r\n                parScoreString = score;\r\n            }\r\n\r\n            // Current Hole PAR-Score\r\n            let parScoreString2;\r\n            let score2 = player.holeData[this.props.currentHole] - this.props.holeData[this.props.currentHole].par;\r\n\r\n            if(score2 > 0){\r\n                parScoreString2 = \"+\" + score2;\r\n            }\r\n            else if(score2 === 0){\r\n                parScoreString2 = \"E\";\r\n            }\r\n            else{\r\n                parScoreString2 = score2;\r\n            }\r\n\r\n            // Getting Player Overall Total-Score (Up until the current hole)\r\n            let totalOverallScore = 0;\r\n            for(var u = 0; u <= this.props.currentHole; u++){\r\n                totalOverallScore += player.holeData[u];\r\n            }\r\n\r\n            // Setting ClassNames for button disabling\r\n            let currentHoleScore = player.holeData[this.props.currentHole];\r\n            let scoreButtonLeft = \"playerScoreButtonMINUS\";\r\n\r\n            if(currentHoleScore === 1){\r\n                scoreButtonLeft += \" disableMinusButton\";\r\n            }\r\n\r\n            return(\r\n                <tr>\r\n                    <td>\r\n                        <span className=\"playerNameText\">{player.name}</span>\r\n                    </td>\r\n\r\n                    <td>\r\n                        <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <span>Total</span>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <span className=\"currentHoleScore\"> \r\n                                        {\r\n                                        //player.totalScore\r\n                                        totalOverallScore\r\n                                        }\r\n                                        <span className=\"parScore\"> ( {parScoreString} ) </span>\r\n                                    </span>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                        </table>\r\n                    </td>\r\n\r\n                    <td>\r\n                        <table>\r\n                            <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    Current\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={this.handleUpdatePlayers.bind(this, player.name, true)} className={scoreButtonLeft}> - </button> &nbsp;\r\n                                         <span className=\"currentHoleScore\">\r\n                                            {currentHoleScore}\r\n                                            <span className=\"parScore\"> ( {parScoreString2} ) </span>\r\n                                         </span>\r\n                                    &nbsp; <button onClick={this.handleUpdatePlayers.bind(this, player.name, false)} className=\"playerScoreButtonPLUS\"> + </button> \r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                        </table>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <table className=\"playerTable\">\r\n                <tbody>\r\n                    {toRender}\r\n                </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleHoleInfoPlayerComponent;","import React, { Component } from 'react';\r\n\r\n// Components\r\nimport SingleHoleInfoTopComponent from './SingleHoleInfoTopComponent';\r\nimport SingleHoleInfoPlayerComponent from './SingleHoleInfoPlayerComponent'\r\n\r\n// Stylesheets\r\nimport './STYLE_SingleHoleInfo.css';\r\n\r\n\r\nclass SingleHoleInfo extends Component{\r\n\r\n    render(){\r\n\r\n        let topComponent = <SingleHoleInfoTopComponent \r\n        currentHole={this.props.holeNumber}\r\n        handleUpdateHoleNumber={this.props.updateHoleNumber.bind(this)}\r\n        handleUpdateParNumber={this.props.updateParNumber.bind(this)}\r\n        par={this.props.par}\r\n        latestHole={this.props.latestHole}\r\n        holeData={this.props.holeData}\r\n        numberOfHoles={this.props.numberOfHoles}\r\n        changeWhichHoleToShow={this.props.changeWhichHoleToShow.bind(this)}\r\n        />;\r\n\r\n        let playerComponent = <SingleHoleInfoPlayerComponent \r\n        listOfPlayersData={this.props.listOfPlayersData}\r\n        updatePlayerData={this.props.updatePlayerData}\r\n        updatePlayerDataForHole={this.props.updatePlayerDataForHole}\r\n        currentHole={this.props.holeNumber}\r\n        par={this.props.par}\r\n        holeData={this.props.holeData}\r\n        numberOfHoles={this.props.numberOfHoles}\r\n        />;\r\n\r\n        let finnishButton;\r\n        if(this.props.holeNumber !== (parseInt(this.props.numberOfHoles) - 1) && !this.props.holeData[this.props.holeNumber].status){\r\n            finnishButton = <button onClick={this.props.completeHole.bind(this)} className=\"completeHoleBtn\">End Hole</button>;\r\n        }\r\n        else{\r\n            finnishButton = '';\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {topComponent}\r\n                <br/><br/>\r\n                {playerComponent}\r\n                <br/>\r\n                {finnishButton}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleHoleInfo;","import React, {Component} from 'react';\r\n\r\n// Components\r\nimport SingleHoleInfo from './SingleHoleInfo';\r\n\r\nconst initialState = {\r\n    numberOfHoles: '',\r\n    holesData: [],\r\n    holeToDisplay: 0,\r\n\r\n    players: [],\r\n    playersData: [],\r\n    initialRender: true,\r\n\r\n    latestHole: 1    \r\n};\r\n\r\nclass PlayGameState extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = initialState;\r\n    }\r\n\r\n    handleUpdateParNumber(direction){\r\n        let currentHoleToDisplay = this.state.holeToDisplay;\r\n        let currentHoleParNumber = this.state.holesData[currentHoleToDisplay].par;\r\n\r\n        //console.log(\"DEBUG: CurrentHoleToDisplay: \" + (currentHoleToDisplay + 1));\r\n        //console.log(\"DEBUG: CurrentHoleParNumber: \" + currentHoleParNumber);\r\n\r\n        for(var i in this.state.holesData){ \r\n            if(this.state.holesData[i].holeNumber === currentHoleToDisplay){\r\n                if(direction === 'minus'){\r\n                    if(currentHoleParNumber > 1){\r\n                        this.state.holesData[i].par = currentHoleParNumber - 1;\r\n                    }\r\n                    else{\r\n                        // Disable '-' Button\r\n                    }\r\n                }\r\n                else if(direction === 'add'){\r\n                    this.state.holesData[i].par = currentHoleParNumber + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        /* Need to update each Player's PAR-over score if we update PAR data for that hole */\r\n        for(var player in this.state.playersData){\r\n            let currentScore = this.state.playersData[player].totalScore;\r\n            let currentRawScore = this.state.playersData[player].parScore;\r\n\r\n            if(direction === 'minus'){\r\n                this.state.playersData[player].parScore = currentRawScore + 1;\r\n            }\r\n            else{\r\n                this.state.playersData[player].parScore = currentRawScore - 1;\r\n            }\r\n        }\r\n\r\n        this.props.handleUpdateHolesData(this.state.holesData);\r\n\r\n        //console.log(\"Current Hole to Display: \" + (this.state.holeToDisplay + 1));\r\n        //console.log(\"Got told to display: \" + (this.state.holesData[currentHoleToDisplay].holeNumber + 1));\r\n        //console.log(\"Updated Par: \" + this.state.holesData[currentHoleToDisplay].par);\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    handleUpdateWhichHoleToShow(direction){\r\n        let currentHoleToDisplay = this.state.holeToDisplay;\r\n        if(direction === 'prev'){\r\n            if(this.state.holeToDisplay > 0){\r\n                this.state.holeToDisplay = currentHoleToDisplay - 1;\r\n            }\r\n            else{\r\n                // Disable '-' button\r\n            }\r\n        }\r\n        else if(direction === 'next'){\r\n            if(this.state.holeToDisplay < parseInt(this.state.numberOfHoles - 1)){\r\n                this.state.holeToDisplay = currentHoleToDisplay + 1;\r\n            }\r\n            else{\r\n                // Disable '+' button\r\n            }\r\n        }\r\n\r\n        /* Handling Updating Latest Hole */\r\n        if(this.state.holeToDisplay >= this.state.latestHole){\r\n            this.state.latestHole = this.state.holeToDisplay + 1; // Using this.setState() doesn't update instantly\r\n        }\r\n\r\n        /* Handling to show exit to results */\r\n        if(this.state.holeToDisplay === parseInt(this.state.numberOfHoles) - 1){\r\n            this.props.handleTriggerFinalHole(true);\r\n            this.props.sendPlayerData(this.state.playersData);\r\n        }\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    changeWhichHoleToShow(hole){\r\n        this.state.holeToDisplay = parseInt(hole - 1);\r\n        \r\n        /* Handling Updating Latest Hole */\r\n        if(this.state.holeToDisplay >= this.state.latestHole){\r\n            this.state.latestHole = this.state.holeToDisplay + 1; // Using this.setState() doesn't update instantly\r\n        }\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    setHoleData(){\r\n        for(var i = 0; i < parseInt(this.state.numberOfHoles); i++){\r\n            this.state.holesData.push({\r\n                holeNumber: i,\r\n                par: 3,\r\n                status: false,\r\n            });\r\n        }\r\n\r\n        this.props.handleSetHoleData(this.state.holesData);\r\n    }\r\n\r\n    setPlayerData(){\r\n        let tempTotalScore = 3 * parseInt(this.state.numberOfHoles);\r\n        for(var player in this.state.players){\r\n            this.state.playersData.push({\r\n                name: this.state.players[player],\r\n                parScore: 0, // keeps track of PAR-over-scores\r\n                totalScore: tempTotalScore, // keeps track of Total-scores\r\n                rawHoleData: [],\r\n                holeData: [],\r\n            });\r\n        }\r\n\r\n        for(var u in this.state.players){\r\n            for(var i = 0; i < this.state.numberOfHoles; i++){\r\n                this.state.playersData[u].holeData.push(3);\r\n                this.state.playersData[u].rawHoleData.push(0);\r\n            }\r\n\r\n            //console.log(\"Player Hole Data | Name: \" + this.state.playersData[u].name + \" HoleData: \" + this.state.playersData[u].holeData);\r\n        }\r\n    }\r\n\r\n    updatePlayerData(player, isGoingDown){\r\n        for(var i in this.state.playersData){\r\n            let singlePlayer = this.state.playersData[i];\r\n\r\n            if(singlePlayer.name === player){\r\n                let currentScore = this.state.playersData[i].totalScore;\r\n                let currentRawScore = this.state.playersData[i].parScore;\r\n\r\n                if(isGoingDown){\r\n                    this.state.playersData[i].totalScore = currentScore - 1;\r\n                    this.state.playersData[i].parScore = currentRawScore - 1;\r\n                }\r\n                else{\r\n                    this.state.playersData[i].totalScore = currentScore + 1;\r\n                    this.state.playersData[i].parScore = currentRawScore + 1;\r\n                } \r\n            }\r\n        }\r\n    }\r\n\r\n    updatePlayerDataForHole(player, isGoingDown){\r\n        for(var i in this.state.playersData){ // finding right player\r\n            let singlePlayer = this.state.playersData[i]\r\n            let currentHole = this.state.holeToDisplay;\r\n\r\n            if(singlePlayer.name === player){// if we found correct player\r\n                let currentScoreForThatHole = singlePlayer.holeData[currentHole];\r\n                let currentRAWScoreForThatHole = singlePlayer.rawHoleData[currentHole];\r\n\r\n                if(isGoingDown){\r\n                    if(currentScoreForThatHole > 1){\r\n                        this.state.playersData[i].holeData[currentHole] = currentScoreForThatHole - 1;\r\n                        this.state.playersData[i].rawHoleData[currentHole] = currentRAWScoreForThatHole - 1;\r\n                    }\r\n                    else{\r\n                        // Disable '-' Button for that player\r\n                    }\r\n                }\r\n                else{\r\n                    this.state.playersData[i].holeData[currentHole] = currentScoreForThatHole + 1;\r\n                    this.state.playersData[i].rawHoleData[currentHole] = currentRAWScoreForThatHole + 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    completeHole(){\r\n        this.changeWhichHoleToShow(this.state.holeToDisplay + 2);\r\n        this.state.holesData[this.state.holeToDisplay - 1].status = true;\r\n\r\n        /* Handling to show exit to results */\r\n        if(this.state.holeToDisplay === parseInt(this.state.numberOfHoles) - 1){\r\n            this.props.handleTriggerFinalHole(true);\r\n            this.props.sendPlayerData(this.state.playersData);\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        if(this.state.initialRender){\r\n            this.state.numberOfHoles = this.props.numberOfHoles; // Using setState() for these also slows things down\r\n            this.state.players = this.props.players;\r\n            this.setPlayerData();\r\n            this.setHoleData();\r\n\r\n            this.state.initialRender = false;\r\n        }\r\n\r\n        let toRender;\r\n\r\n        let arrayOfSingleHoleInfoComponents = this.state.holesData.map( currentHole => {\r\n            return (\r\n                <div>\r\n                    <SingleHoleInfo\r\n                    holeNumber={currentHole.holeNumber}\r\n                    listOfPlayersData={this.state.playersData}\r\n                    updatePlayerData={this.updatePlayerData.bind(this)}\r\n                    updatePlayerDataForHole={this.updatePlayerDataForHole.bind(this)}\r\n                    updateHoleNumber={this.handleUpdateWhichHoleToShow.bind(this)} \r\n                    updateParNumber={this.handleUpdateParNumber.bind(this)}\r\n                    par={currentHole.par}\r\n                    holeData={this.state.holesData}\r\n                    numberOfHoles={this.props.numberOfHoles}\r\n                    latestHole={this.state.latestHole}\r\n                    changeWhichHoleToShow={this.changeWhichHoleToShow.bind(this)}\r\n                    completeHole={this.completeHole.bind(this)}\r\n                    />\r\n                </div>\r\n            );\r\n        });\r\n\r\n\r\n        /*\r\n        // rendering just one sample of singleHoleInfo whilst implementing design of singleHoleInfo\r\n        // @To-Do: need to implement switch-case where which singleHoleInfo to show\r\n        let toRender = <SingleHoleInfo\r\n        listOfPlayersData={this.state.playersData}\r\n        updatePlayerData={this.updatePlayerData.bind(this)}\r\n\r\n        />\r\n        */\r\n\r\n        // Which Hole to show\r\n        for(var i in arrayOfSingleHoleInfoComponents){\r\n            if(parseInt(i) === this.state.holeToDisplay){\r\n                toRender = arrayOfSingleHoleInfoComponents[i];\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                {toRender} \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayGameState;","import React, {Component} from 'react';\r\n\r\nclass ExcessPlayerPage extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <p> tell some people to quit cus 8+ is too many people ... </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExcessPlayerPage;","import React, { Component } from 'react';\r\n\r\n// Stylesheets\r\nimport './STYLE_OptionSelectionBanner.css';\r\n\r\nclass OptionSelectionBanner extends Component{\r\n\r\n    render(){\r\n        let players = this.props.numberOfPlayers;\r\n        let holes = this.props.numberOfHoles;\r\n        let currentComponent = this.props.currentComponent;\r\n\r\n        if(currentComponent === 'playGameState'){\r\n            return(\r\n                <div>\r\n                    Players: {players} | Holes: {holes} \r\n                    <br/> <br/> \r\n                    <span onClick={this.props.goingToAreYouSurePage} className=\"infoBannerPLAY\"> Reset Game &#8635; </span>\r\n                </div>\r\n            );\r\n        }\r\n        else if(currentComponent === 'playerNumberState'){\r\n            return(\r\n                <div>\r\n                    <span className=\"infoBannerPLAYERNUMBER\"> Players: {players} </span>\r\n                    <span className=\"paddingThingy\"> | </span>\r\n                    <span className=\"infoBannerPLAYERNUMBER\"> Holes: {holes} </span>\r\n                </div>\r\n            );\r\n        }\r\n        else if(currentComponent === 'holeNumberState'){\r\n            return(\r\n                <div>\r\n                    <span onClick={this.props.goingToNumberOfPlayers} className=\"infoBannerHOLENUMBERplayer\"> Players: {players} </span>\r\n                    <span className=\"paddingThingy\"> | </span>\r\n                    <span onClick={this.props.goingToNumberOfHoles} className=\"infoBannerHOLENUMBER\"> Holes: {holes} </span>\r\n                </div>\r\n            );\r\n        }\r\n        else if(currentComponent === 'EnterNameState'){\r\n            return(\r\n                <div>\r\n                    <span onClick={this.props.goingToNumberOfPlayers} className=\"infoBannerENTERNAMES\"> Players: {players} </span>\r\n                    <span className=\"paddingThingy\"> | </span>\r\n                    <span onClick={this.props.goingToNumberOfHoles} className=\"infoBannerENTERNAMES\"> Holes: {holes} </span>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default OptionSelectionBanner;","import React, {Component} from 'react';\r\n\r\n// Stylesheets\r\nimport './STYLE_AreYouSure.css';\r\n\r\nclass AreYouSure extends Component{\r\n\r\n    // should be onClick={this.props.goingToReturnToPlayGameState} for second button\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <p>This will Reset <u>Everything</u>, Are you sure?</p>\r\n                <ul>\r\n                    <li><button onClick={this.props.goingToResetGame} className=\"resetButtons\"> Yes </button></li>\r\n                    <li> or </li>\r\n                    <li><button onClick={this.props.lol} className=\"resetButtons\"> No </button></li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AreYouSure;","import React, {Component} from 'react';\r\n\r\n// Stylesheets\r\nimport './STYLE_Results.css'\r\n\r\nclass ResultsPage extends Component{\r\n\r\n    getColor(x){\r\n        if(x === 1){\r\n            return \"gold\";\r\n        }\r\n        else if(x === 2){\r\n            return \"green\";\r\n        }\r\n        else if(x === 4){\r\n            return \"blue\";\r\n        }\r\n        else if( x >= 5){\r\n            return \"red\";\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let things = this.props.data.map(player => {\r\n            let scores = player.holeData.map(x => {\r\n                let classColor = this.getColor(x) + \" scoreCell\";\r\n                return(\r\n                    <td className={classColor}>\r\n                        {x}\r\n                    </td>\r\n                );\r\n            });\r\n\r\n            /* Making an excuse-array for making .map function to make hole numbers at top row */\r\n            let workingArray = [];\r\n            for(var i = 0; i < parseInt(this.props.holes); i++){\r\n                workingArray.push(i + 1);\r\n            }\r\n\r\n            /* Making an excuse-array for making .map function to make hole numbers at top row */\r\n            let topBit = workingArray.map(x => {\r\n                return(\r\n                    <td className=\"scoreCell holeNumberCell\">\r\n                        {x}\r\n                    </td>\r\n                );\r\n            });\r\n\r\n            let parOverScore;\r\n            let className;\r\n            if(player.parScore === 0){\r\n                parOverScore = \"E\";\r\n                className=\"blueTotal\";\r\n            }\r\n            else if(player.parScore > 0){\r\n                parOverScore = \"+\" + player.parScore;\r\n                className=\"redTotal\";\r\n            }\r\n            else{\r\n                parOverScore = player.parScore;\r\n                className=\"greenTotal\";\r\n            }\r\n\r\n            return(\r\n               <div className=\"resultsPage\">\r\n                    <span className=\"playerName\"><b> {player.name} </b></span>  &nbsp;\r\n                    <span className=\"scoreContainer\">\r\n                        <span className=\"totalscorethingy\"> {player.totalScore} </span> \r\n                        <span className=\"overScoreNumber\"> ( <span className={className}> {parOverScore} </span> ) </span>\r\n                    </span>\r\n\r\n                   <table className=\"resultsTable\">\r\n                       <tbody>\r\n                           <tr>\r\n                               {topBit}\r\n                           </tr>\r\n                           <tr>\r\n                               {scores}\r\n                           </tr>\r\n                       </tbody>\r\n                   </table>\r\n                   \r\n                   <br/><br/>\r\n               </div>\r\n            );\r\n        });\r\n\r\n        let totalPAR = 0;\r\n        for(var i in this.props.holesData){\r\n            totalPAR += parseInt(this.props.holesData[i].par);\r\n        }\r\n\r\n        return(\r\n            <div className=\"resultsTable\">\r\n                <div>\r\n                    <button className=\"resultsNavItem\"> Save </button> &nbsp; | &nbsp;\r\n                    <button className=\"resultsNavItem\"> Restart </button> &nbsp; | &nbsp;\r\n                    <button className=\"resultsNavItem\"> Back </button>\r\n                </div>\r\n                \r\n                <h2>Overall Scores</h2>\r\n                <h4> For PAR: {totalPAR} </h4>\r\n                \r\n                <br/>\r\n                \r\n                {things}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultsPage;","import React, { Component } from 'react';\r\n\r\n// Components\r\nimport PlayerNumber from './Components/PlayerNumber';\r\nimport HoleNumber from './Components/HoleNumber';\r\nimport EnterNames from './Components/EnterNames';\r\nimport PlayGameState from './Components/PlayGameState';\r\nimport ExcessPlayerPage from './Components/ExcessPlayerPage';\r\nimport OptionSelectionBanner from './Components/OptionSelectionBanner';\r\nimport AreYouSure from './Components/AreYouSure';\r\nimport ResultsPage from './Components/ResultsPage';\r\n\r\n// Stylesheets\r\nimport './App.css';\r\n\r\nconst initialState = {\r\n  currentComponent: 'playerNumberState',\r\n  playerNumber: ' ', // if '' empty string, then props assignment doesn't seem to work\r\n  holes: ' ',\r\n  players: [],\r\n\r\n  isFinalHole: false,\r\n\r\n  stack: [],\r\n\r\n  playerData:[],\r\n  holesData: []\r\n};\r\n\r\nclass App extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = initialState;\r\n  }\r\n\r\n  /* Getting Number of Players */\r\n  handleUpdatePlayerNumber(number){\r\n    this.setState({playerNumber: number});\r\n    console.log(\"Number of Players: \" + this.state.playerNumber);\r\n  }\r\n\r\n  handleGoToHoleNumber(){\r\n    this.setState({currentComponent: 'holeNumberState'});\r\n  }\r\n\r\n  handleGoToPlayerNumber(){\r\n    this.setState({currentComponent: 'playerNumberState'});\r\n  }\r\n\r\n  /* Getting Number of Holes */\r\n  handleUpdateHoleNumber(number){\r\n    this.setState({holes: number});\r\n    console.log(\"Number of Holes: \" + this.state.holes);\r\n  }\r\n\r\n  handleGoToEnterNameState(){\r\n    this.setState({currentComponent: 'EnterNameState'})\r\n  }\r\n\r\n  handleGoToPlayGameState(){\r\n    this.setState({currentComponent: 'playGameState'})\r\n  }\r\n\r\n  handleGoToExcessPlayers(){\r\n    this.setState({currentComponent: 'excessPlayers'});\r\n  }\r\n\r\n  handleSetListOfPlayers(mylist){\r\n    this.setState({players: mylist});\r\n    console.log(\"List of Players: \" + this.state.players);\r\n  }\r\n\r\n  handleGoToAreYouSurePage(){\r\n    this.setState({currentComponent: 'areYouSure'});\r\n  }\r\n\r\n  handleGoToReturnToPlayState(){\r\n    this.setState({currentComponent: 'resumePlay'});\r\n  }\r\n\r\n  handleResetGame(){\r\n    this.setState({initialState});\r\n    this.setState({currentComponent: 'playerNumberState'});\r\n  }\r\n\r\n  handleTriggerFinalHole(isFinalHole){\r\n    if(isFinalHole){\r\n      this.setState({isFinalHole: true});\r\n    }\r\n    else{\r\n      this.setState({isFinalHole: false});\r\n    }\r\n  }\r\n\r\n  handleGotToResultsPage(){\r\n    this.setState({currentComponent: 'resultsPage'});\r\n  }\r\n\r\n  handleGettingPlayerData(data){\r\n    this.setState({playerData: data});\r\n  }\r\n\r\n  handleSetHolesData(data){\r\n    this.setState({holesData: data});\r\n  }\r\n\r\n  handleUpdateHolesData(data){\r\n    this.setState({holesData: data});\r\n  }\r\n\r\n  render() {\r\n\r\n    let toRender;\r\n    let showBanner;\r\n    let finnishAndResults;\r\n\r\n    if(this.state.currentComponent === 'playerNumberState'){\r\n        toRender = <PlayerNumber \r\n        numberOfPlayers={this.handleUpdatePlayerNumber.bind(this)}\r\n        goingToNumberOfHoles={this.handleGoToHoleNumber.bind(this)}\r\n        goingToExcessPlayers={this.handleGoToExcessPlayers.bind(this)}\r\n        />;\r\n\r\n        showBanner = <OptionSelectionBanner\r\n        numberOfHoles = {this.state.holes}\r\n        numberOfPlayers = {this.state.playerNumber}\r\n        currentComponent = {this.state.currentComponent}\r\n        goingToNumberOfHoles = {this.handleGoToHoleNumber.bind(this)}\r\n        goingToNumberOfPlayers = {this.handleGoToPlayerNumber.bind(this)}\r\n        />;\r\n    }\r\n    else if(this.state.currentComponent === 'holeNumberState'){\r\n      toRender = <HoleNumber \r\n      numberOfHoles={this.handleUpdateHoleNumber.bind(this)}\r\n      goingToEnterNameState={this.handleGoToEnterNameState.bind(this)}\r\n      />;\r\n\r\n      showBanner = <OptionSelectionBanner\r\n      numberOfHoles = '-'\r\n      numberOfPlayers = {this.state.playerNumber}\r\n      currentComponent = {this.state.currentComponent}\r\n      goingToNumberOfHoles={this.handleGoToHoleNumber.bind(this)}\r\n      goingToNumberOfPlayers={this.handleGoToPlayerNumber.bind(this)}\r\n      />;\r\n    }\r\n    else if(this.state.currentComponent === 'EnterNameState'){\r\n      toRender = <EnterNames \r\n      setListOfPlayers={this.handleSetListOfPlayers.bind(this)}\r\n      numberOfPlayers={this.state.playerNumber}\r\n      goingToPlayGameState={this.handleGoToPlayGameState.bind(this)}\r\n      />;\r\n\r\n      showBanner = <OptionSelectionBanner\r\n      numberOfHoles = {this.state.holes}\r\n      numberOfPlayers = {this.state.playerNumber}\r\n      currentComponent = {this.state.currentComponent}\r\n      goingToNumberOfHoles = {this.handleGoToHoleNumber.bind(this)}\r\n      goingToNumberOfPlayers = {this.handleGoToPlayerNumber.bind(this)}\r\n      />;\r\n    }\r\n    else if(this.state.currentComponent === 'playGameState'){\r\n      toRender = <PlayGameState\r\n      numberOfHoles = {this.state.holes}\r\n      players = {this.state.players}\r\n      handleTriggerFinalHole={this.handleTriggerFinalHole.bind(this)}\r\n      sendPlayerData={this.handleGettingPlayerData.bind(this)}\r\n      handleSetHoleData={this.handleSetHolesData.bind(this)}\r\n      handleUpdateHolesData={this.handleUpdateHolesData.bind(this)}\r\n      />;\r\n\r\n      showBanner = <OptionSelectionBanner\r\n      numberOfHoles = {this.state.holes}\r\n      numberOfPlayers = {this.state.playerNumber}\r\n      currentComponent = {this.state.currentComponent}\r\n      goingToNumberOfHoles = {this.handleGoToHoleNumber.bind(this)}\r\n      goingToNumberOfPlayers = {this.handleGoToPlayerNumber.bind(this)}\r\n      goingToAreYouSurePage = {this.handleGoToAreYouSurePage.bind(this)}\r\n      />;\r\n\r\n      this.state.stack.push(toRender);\r\n      this.state.stack.push(showBanner);\r\n    }\r\n    else if(this.state.currentComponent === 'excessPlayers'){\r\n      toRender = <ExcessPlayerPage\r\n      />;\r\n    }\r\n    else if(this.state.currentComponent === 'areYouSure'){\r\n      toRender = <AreYouSure\r\n      goingToResetGame = {this.handleResetGame.bind(this)}\r\n      goingToReturnToPlayGameState = {this.handleGoToReturnToPlayState.bind(this)}\r\n      />;\r\n    }\r\n    else if(this.state.currentComponent === 'resumePlay'){\r\n      showBanner = this.state.stack[1];\r\n      toRender = this.state.stack[0]; \r\n    }\r\n    else if(this.state.currentComponent === 'resultsPage'){\r\n      toRender = <ResultsPage\r\n      data={this.state.playerData}\r\n      holes={this.state.holes}\r\n      holesData={this.state.holesData}\r\n      />\r\n    }\r\n    else{\r\n      alert('Extremely Fatal Error Occured - There was no component to load');\r\n    }\r\n\r\n    // If we reach final Hole, then give user option to exit game and show overall results\r\n    if(this.state.isFinalHole && this.state.currentComponent === 'playGameState'){\r\n      finnishAndResults = <span className=\"resultsButton\" onClick={this.handleGotToResultsPage.bind(this)}>Finnish and Display Results</span>;\r\n    }\r\n    else{\r\n      finnishAndResults = '';\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <link href=\"https://fonts.googleapis.com/css?family=Gruppo\" rel=\"stylesheet\"/>\r\n          <link href=\"https://fonts.googleapis.com/css?family=Harmattan\" rel=\"stylesheet\"/>\r\n\r\n          <div className=\"banner\">\r\n            {showBanner}\r\n          </div>\r\n\r\n          {toRender}\r\n\r\n          <br/>\r\n\r\n          {finnishAndResults}\r\n        </header>\r\n\r\n        <br/> <br/>\r\n        <footer> Created By Paul Yoon (kodawarii/ayamachi, S'Eunbal'K_DU`Development 2019©) </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}